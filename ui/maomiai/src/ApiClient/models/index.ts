/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type ApiError, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AddAiEndpointRequest extends AiEndpoint, Parsable {
}
/**
 * AI 模型.
 */
export interface AiEndpoint extends Parsable {
    /**
     * additional parameters.
     */
    abilities?: ModelAbilities | null;
    /**
     * 模型类型.
     */
    aiModelType?: AiModelType | null;
    /**
     * the context window (or input + output tokens limit).
     */
    contextWindowTokens?: number | null;
    /**
     * 部署名称，适配 Azure Open AI ，非 Azure Open AI 跟 Name 同名.
     */
    deploymentName?: string | null;
    /**
     * 对用户显示名称.
     */
    displayName?: string | null;
    /**
     * 请求端点.
     */
    endpoint?: string | null;
    /**
     * key.
     */
    key?: string | null;
    /**
     * 向量模型的维度.
     */
    maxDimension?: number | null;
    /**
     * 模型名称.
     */
    name?: string | null;
    /**
     * AI 服务商.
     */
    provider?: AiProvider | null;
    /**
     * 最大模型输出 tokens，也可表示嵌入向量等最大输出数量.
     */
    textOutput?: number | null;
}
export type AiModelType = (typeof AiModelTypeObject)[keyof typeof AiModelTypeObject];
/**
 * AI 模型.
 */
export interface AiNotKeyEndpoint extends Parsable {
    /**
     * additional parameters.
     */
    abilities?: ModelAbilities | null;
    /**
     * 模型类型.
     */
    aiModelType?: AiModelType | null;
    /**
     * the context window (or input + output tokens limit).
     */
    contextWindowTokens?: number | null;
    /**
     * 部署名称，适配 Azure Open AI ，非 Azure Open AI 跟 Name 同名.
     */
    deploymentName?: string | null;
    /**
     * 对用户显示名称.
     */
    displayName?: string | null;
    /**
     * 请求端点.
     */
    endpoint?: string | null;
    /**
     * id.
     */
    id?: Guid | null;
    /**
     * 向量模型的维度.
     */
    maxDimension?: number | null;
    /**
     * 模型名称.
     */
    name?: string | null;
    /**
     * AI 服务商.
     */
    provider?: AiProvider | null;
    /**
     * 最大模型输出 tokens，TextOutput.
     */
    textOutput?: number | null;
}
export type AiProvider = (typeof AiProviderObject)[keyof typeof AiProviderObject];
/**
 * 数据子项.
 */
export interface AuditsInfo extends Parsable {
    /**
     * 创建时间.
     */
    createTime?: string | null;
    /**
     * 创建人ID.
     */
    createUserId?: Guid | null;
    /**
     * 创建者 名字.
     */
    createUserName?: string | null;
    /**
     * 更新时间.
     */
    updateTime?: string | null;
    /**
     * 更新人ID.
     */
    updateUserId?: Guid | null;
    /**
     * 更新人 名字.
     */
    updateUserName?: string | null;
}
/**
 * 错误信息.
 */
export interface BusinessExceptionError extends Parsable {
    /**
     * 错误信息列表.
     */
    errors?: string[] | null;
    /**
     * 名称.
     */
    name?: string | null;
}
/**
 * 错误响应模型.
 */
export interface BusinessExceptionResponse extends ApiError, Parsable {
    /**
     * 错误码.
     */
    code?: number | null;
    /**
     * 错误消息.
     */
    detail?: string | null;
    /**
     * 具体错误列表.
     */
    errors?: BusinessExceptionError[] | null;
    /**
     * 扩展.
     */
    extensions?: BusinessExceptionResponse_extensions | null;
    /**
     * 请求上下文 ID.
     */
    requestId?: string | null;
}
/**
 * 扩展.
 */
export interface BusinessExceptionResponse_extensions extends Parsable {
}
/**
 * 取消文档处理任务.
 */
export interface CancalWikiDocumentTaskCommand extends Parsable {
    /**
     * 文档id.
     */
    documentId?: Guid | null;
    /**
     * 任务 id.
     */
    taskId?: Guid | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库id.
     */
    wikiId?: Guid | null;
}
export interface Citation extends Parsable {
    /**
     * Link to the source, if available.
     */
    documentId?: string | null;
    /**
     * Link to the source, if available.
     */
    fileId?: string | null;
    /**
     * Link to the source, if available.
     */
    index?: string | null;
    /**
     * Link to the source, if available.
     */
    link?: string | null;
    /**
     * List of chunks/blocks of text used.
     */
    partitions?: Citation_Partition[] | null;
    /**
     * Type of source, e.g. PDF, Word, Chat, etc.
     */
    sourceContentType?: string | null;
    /**
     * Name of the source, e.g. file name.
     */
    sourceName?: string | null;
    /**
     * URL of the source, used for web pages and external data
     */
    sourceUrl?: string | null;
}
export interface Citation_Partition extends Parsable {
    /**
     * Timestamp about the file/text partition.
     */
    lastUpdate?: string | null;
    /**
     * Partition number, zero based
     */
    partitionNumber?: number | null;
    /**
     * Relevance of this partition against the given query.Value usually is between 0 and 1, when using cosine similarity.
     */
    relevance?: number | null;
    /**
     * Text page number / Audio segment number / Video scene number
     */
    sectionNumber?: number | null;
    /**
     * List of document tags
     */
    tags?: KeyValuePairOfStringAndListOfString[] | null;
    /**
     * Content of the document partition, aka chunk/block of text.
     */
    text?: string | null;
}
/**
 * 完成文件上传.
 */
export interface ComplateFileCommandResponse extends Parsable {
}
/**
 * 结束上传文件.
 */
export interface ComplateFileUploadCommand extends Parsable {
    /**
     * 文件ID.
     */
    fileId?: Guid | null;
    /**
     * 上传成功或失败.
     */
    isSuccess?: boolean | null;
}
/**
 * 结束上传文件.
 */
export interface ComplateUploadWikiDocumentCommand extends Parsable {
    /**
     * 文件ID.
     */
    fileId?: Guid | null;
    /**
     * 上传成功或失败.
     */
    isSuccess?: boolean | null;
    /**
     * 团队ID.
     */
    teamId?: Guid | null;
    /**
     * 知识库ID.
     */
    wikiId?: Guid | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddAiEndpointRequest}
 */
// @ts-ignore
export function createAddAiEndpointRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddAiEndpointRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiEndpoint}
 */
// @ts-ignore
export function createAiEndpointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiEndpoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiNotKeyEndpoint}
 */
// @ts-ignore
export function createAiNotKeyEndpointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiNotKeyEndpoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AuditsInfo}
 */
// @ts-ignore
export function createAuditsInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAuditsInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BusinessExceptionError}
 */
// @ts-ignore
export function createBusinessExceptionErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBusinessExceptionError;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BusinessExceptionResponse_extensions}
 */
// @ts-ignore
export function createBusinessExceptionResponse_extensionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBusinessExceptionResponse_extensions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BusinessExceptionResponse}
 */
// @ts-ignore
export function createBusinessExceptionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBusinessExceptionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CancalWikiDocumentTaskCommand}
 */
// @ts-ignore
export function createCancalWikiDocumentTaskCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCancalWikiDocumentTaskCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Citation_Partition}
 */
// @ts-ignore
export function createCitation_PartitionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCitation_Partition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Citation}
 */
// @ts-ignore
export function createCitationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCitation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComplateFileCommandResponse}
 */
// @ts-ignore
export function createComplateFileCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComplateFileCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComplateFileUploadCommand}
 */
// @ts-ignore
export function createComplateFileUploadCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComplateFileUploadCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComplateUploadWikiDocumentCommand}
 */
// @ts-ignore
export function createComplateUploadWikiDocumentCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComplateUploadWikiDocumentCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateTeamCommand}
 */
// @ts-ignore
export function createCreateTeamCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateTeamCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateWikiCommand}
 */
// @ts-ignore
export function createCreateWikiCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateWikiCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeleteWikiCommand}
 */
// @ts-ignore
export function createDeleteWikiCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeleteWikiCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeleteWikiDocumentCommand}
 */
// @ts-ignore
export function createDeleteWikiDocumentCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeleteWikiDocumentCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EmbeddingocumentCommand}
 */
// @ts-ignore
export function createEmbeddingocumentCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmbeddingocumentCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EmptyCommandResponse}
 */
// @ts-ignore
export function createEmptyCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmptyCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExistResponse}
 */
// @ts-ignore
export function createExistResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExistResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IdResponse}
 */
// @ts-ignore
export function createIdResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIdResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InviteUserToTeamCommand}
 */
// @ts-ignore
export function createInviteUserToTeamCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInviteUserToTeamCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeyValuePairOfStringAndListOfString}
 */
// @ts-ignore
export function createKeyValuePairOfStringAndListOfStringFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeyValuePairOfStringAndListOfString;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginCommand}
 */
// @ts-ignore
export function createLoginCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginCommandResponse}
 */
// @ts-ignore
export function createLoginCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ModelAbilities}
 */
// @ts-ignore
export function createModelAbilitiesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoModelAbilities;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PagedParamter}
 */
// @ts-ignore
export function createPagedParamterFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPagedParamter;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PagedResultOfQueryTeamSimpleCommandResponse}
 */
// @ts-ignore
export function createPagedResultOfQueryTeamSimpleCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPagedResultOfQueryTeamSimpleCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PagedResultOfQueryWikiDocumentListItem}
 */
// @ts-ignore
export function createPagedResultOfQueryWikiDocumentListItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPagedResultOfQueryWikiDocumentListItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PagedResultOfTeamMemberResponse}
 */
// @ts-ignore
export function createPagedResultOfTeamMemberResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPagedResultOfTeamMemberResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PreloadWikiDocumentResponse}
 */
// @ts-ignore
export function createPreloadWikiDocumentResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPreloadWikiDocumentResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PreUploadFileCommandResponse}
 */
// @ts-ignore
export function createPreUploadFileCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPreUploadFileCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PreUploadImageCommand}
 */
// @ts-ignore
export function createPreUploadImageCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPreUploadImageCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PreUploadWikiDocumentCommand}
 */
// @ts-ignore
export function createPreUploadWikiDocumentCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPreUploadWikiDocumentCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryAiModelListCommand}
 */
// @ts-ignore
export function createQueryAiModelListCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryAiModelListCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryAiModelListCommandResponse}
 */
// @ts-ignore
export function createQueryAiModelListCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryAiModelListCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryAiModelProviderCount}
 */
// @ts-ignore
export function createQueryAiModelProviderCountFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryAiModelProviderCount;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryAiModelProviderListResponse}
 */
// @ts-ignore
export function createQueryAiModelProviderListResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryAiModelProviderListResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryDefaultAiModelListCommand}
 */
// @ts-ignore
export function createQueryDefaultAiModelListCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryDefaultAiModelListCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryDefaultAiModelListResponse}
 */
// @ts-ignore
export function createQueryDefaultAiModelListResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryDefaultAiModelListResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryRepeatedUserNameCommand}
 */
// @ts-ignore
export function createQueryRepeatedUserNameCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryRepeatedUserNameCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryServerInfoResponse}
 */
// @ts-ignore
export function createQueryServerInfoResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryServerInfoResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryTeamDetailCommandResponse}
 */
// @ts-ignore
export function createQueryTeamDetailCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryTeamDetailCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryTeamMemberListCommand}
 */
// @ts-ignore
export function createQueryTeamMemberListCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryTeamMemberListCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryTeamNameCommand}
 */
// @ts-ignore
export function createQueryTeamNameCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryTeamNameCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryTeamSimpleCommandResponse}
 */
// @ts-ignore
export function createQueryTeamSimpleCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryTeamSimpleCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryUserInfoCommandResponse}
 */
// @ts-ignore
export function createQueryUserInfoCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryUserInfoCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryUserJoinedTeamCommand}
 */
// @ts-ignore
export function createQueryUserJoinedTeamCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryUserJoinedTeamCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiConfigCommandResponse}
 */
// @ts-ignore
export function createQueryWikiConfigCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiConfigCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiDetailInfoCommand}
 */
// @ts-ignore
export function createQueryWikiDetailInfoCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiDetailInfoCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiDetailInfoResponse}
 */
// @ts-ignore
export function createQueryWikiDetailInfoResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiDetailInfoResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiDocumentInfoCommand}
 */
// @ts-ignore
export function createQueryWikiDocumentInfoCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiDocumentInfoCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiDocumentListCommand}
 */
// @ts-ignore
export function createQueryWikiDocumentListCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiDocumentListCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiDocumentListItem}
 */
// @ts-ignore
export function createQueryWikiDocumentListItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiDocumentListItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiDocumentListResponse}
 */
// @ts-ignore
export function createQueryWikiDocumentListResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiDocumentListResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiDocumentTaskListCommand}
 */
// @ts-ignore
export function createQueryWikiDocumentTaskListCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiDocumentTaskListCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiSimpleInfoCommand}
 */
// @ts-ignore
export function createQueryWikiSimpleInfoCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiSimpleInfoCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueryWikiSimpleInfoResponse}
 */
// @ts-ignore
export function createQueryWikiSimpleInfoResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueryWikiSimpleInfoResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RefreshTokenCommand}
 */
// @ts-ignore
export function createRefreshTokenCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRefreshTokenCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegisterUserCommand}
 */
// @ts-ignore
export function createRegisterUserCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRegisterUserCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RemoveTeamMemberCommand}
 */
// @ts-ignore
export function createRemoveTeamMemberCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRemoveTeamMemberCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchResult}
 */
// @ts-ignore
export function createSearchResultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchWikiDocumentTextCommand}
 */
// @ts-ignore
export function createSearchWikiDocumentTextCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchWikiDocumentTextCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchWikiDocumentTextCommandResponse}
 */
// @ts-ignore
export function createSearchWikiDocumentTextCommandResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchWikiDocumentTextCommandResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SetDefaultAiModelCommand}
 */
// @ts-ignore
export function createSetDefaultAiModelCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSetDefaultAiModelCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SetTeamAdminCommand}
 */
// @ts-ignore
export function createSetTeamAdminCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSetTeamAdminCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SetWikiDefaultModelCommand}
 */
// @ts-ignore
export function createSetWikiDefaultModelCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSetWikiDefaultModelCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SimpleOfBoolean}
 */
// @ts-ignore
export function createSimpleOfBooleanFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSimpleOfBoolean;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SimpleOfString}
 */
// @ts-ignore
export function createSimpleOfStringFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSimpleOfString;
}
/**
 * 创建团队命令.
 */
export interface CreateTeamCommand extends Parsable {
    /**
     * 团队描述.
     */
    description?: string | null;
    /**
     * 团队名称.
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamMemberResponse}
 */
// @ts-ignore
export function createTeamMemberResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamMemberResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateAiEndpointRequest}
 */
// @ts-ignore
export function createUpdateAiEndpointRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateAiEndpointRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateTeamInfoCommand}
 */
// @ts-ignore
export function createUpdateTeamInfoCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateTeamInfoCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateUserPasswordCommand}
 */
// @ts-ignore
export function createUpdateUserPasswordCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateUserPasswordCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateWikiConfigCommand}
 */
// @ts-ignore
export function createUpdateWikiConfigCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateWikiConfigCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateWikiInfoCommand}
 */
// @ts-ignore
export function createUpdateWikiInfoCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateWikiInfoCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UploadTeamAvatarCommand}
 */
// @ts-ignore
export function createUploadTeamAvatarCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUploadTeamAvatarCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UploadtUserAvatarCommand}
 */
// @ts-ignore
export function createUploadtUserAvatarCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUploadtUserAvatarCommand;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UploadWikiAvatarCommand}
 */
// @ts-ignore
export function createUploadWikiAvatarCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUploadWikiAvatarCommand;
}
/**
 * 创建知识库.
 */
export interface CreateWikiCommand extends Parsable {
    /**
     * 团队描述.
     */
    description?: string | null;
    /**
     * 团队名称.
     */
    name?: string | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WikiConfig}
 */
// @ts-ignore
export function createWikiConfigFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWikiConfig;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WikiDocumentTaskItem}
 */
// @ts-ignore
export function createWikiDocumentTaskItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWikiDocumentTaskItem;
}
/**
 * 删除 Wiki.
 */
export interface DeleteWikiCommand extends Parsable {
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 团队id.
     */
    wikiId?: Guid | null;
}
/**
 * 删除知识库文档.
 */
export interface DeleteWikiDocumentCommand extends Parsable {
    /**
     * 文档 id.
     */
    documentId?: Guid | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddAiEndpointRequest(addAiEndpointRequest: Partial<AddAiEndpointRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAiEndpoint(addAiEndpointRequest),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiEndpoint(aiEndpoint: Partial<AiEndpoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "abilities": n => { aiEndpoint.abilities = n.getObjectValue<ModelAbilities>(createModelAbilitiesFromDiscriminatorValue); },
        "aiModelType": n => { aiEndpoint.aiModelType = n.getEnumValue<AiModelType>(AiModelTypeObject); },
        "contextWindowTokens": n => { aiEndpoint.contextWindowTokens = n.getNumberValue(); },
        "deploymentName": n => { aiEndpoint.deploymentName = n.getStringValue(); },
        "displayName": n => { aiEndpoint.displayName = n.getStringValue(); },
        "endpoint": n => { aiEndpoint.endpoint = n.getStringValue(); },
        "key": n => { aiEndpoint.key = n.getStringValue(); },
        "maxDimension": n => { aiEndpoint.maxDimension = n.getNumberValue(); },
        "name": n => { aiEndpoint.name = n.getStringValue(); },
        "provider": n => { aiEndpoint.provider = n.getEnumValue<AiProvider>(AiProviderObject); },
        "textOutput": n => { aiEndpoint.textOutput = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiNotKeyEndpoint(aiNotKeyEndpoint: Partial<AiNotKeyEndpoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "abilities": n => { aiNotKeyEndpoint.abilities = n.getObjectValue<ModelAbilities>(createModelAbilitiesFromDiscriminatorValue); },
        "aiModelType": n => { aiNotKeyEndpoint.aiModelType = n.getEnumValue<AiModelType>(AiModelTypeObject); },
        "contextWindowTokens": n => { aiNotKeyEndpoint.contextWindowTokens = n.getNumberValue(); },
        "deploymentName": n => { aiNotKeyEndpoint.deploymentName = n.getStringValue(); },
        "displayName": n => { aiNotKeyEndpoint.displayName = n.getStringValue(); },
        "endpoint": n => { aiNotKeyEndpoint.endpoint = n.getStringValue(); },
        "id": n => { aiNotKeyEndpoint.id = n.getGuidValue(); },
        "maxDimension": n => { aiNotKeyEndpoint.maxDimension = n.getNumberValue(); },
        "name": n => { aiNotKeyEndpoint.name = n.getStringValue(); },
        "provider": n => { aiNotKeyEndpoint.provider = n.getEnumValue<AiProvider>(AiProviderObject); },
        "textOutput": n => { aiNotKeyEndpoint.textOutput = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAuditsInfo(auditsInfo: Partial<AuditsInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createTime": n => { auditsInfo.createTime = n.getStringValue(); },
        "createUserId": n => { auditsInfo.createUserId = n.getGuidValue(); },
        "createUserName": n => { auditsInfo.createUserName = n.getStringValue(); },
        "updateTime": n => { auditsInfo.updateTime = n.getStringValue(); },
        "updateUserId": n => { auditsInfo.updateUserId = n.getGuidValue(); },
        "updateUserName": n => { auditsInfo.updateUserName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBusinessExceptionError(businessExceptionError: Partial<BusinessExceptionError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "errors": n => { businessExceptionError.errors = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { businessExceptionError.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBusinessExceptionResponse(businessExceptionResponse: Partial<BusinessExceptionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { businessExceptionResponse.code = n.getNumberValue(); },
        "detail": n => { businessExceptionResponse.detail = n.getStringValue(); },
        "errors": n => { businessExceptionResponse.errors = n.getCollectionOfObjectValues<BusinessExceptionError>(createBusinessExceptionErrorFromDiscriminatorValue); },
        "extensions": n => { businessExceptionResponse.extensions = n.getObjectValue<BusinessExceptionResponse_extensions>(createBusinessExceptionResponse_extensionsFromDiscriminatorValue); },
        "requestId": n => { businessExceptionResponse.requestId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBusinessExceptionResponse_extensions(businessExceptionResponse_extensions: Partial<BusinessExceptionResponse_extensions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCancalWikiDocumentTaskCommand(cancalWikiDocumentTaskCommand: Partial<CancalWikiDocumentTaskCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "documentId": n => { cancalWikiDocumentTaskCommand.documentId = n.getGuidValue(); },
        "taskId": n => { cancalWikiDocumentTaskCommand.taskId = n.getGuidValue(); },
        "teamId": n => { cancalWikiDocumentTaskCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { cancalWikiDocumentTaskCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCitation(citation: Partial<Citation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "documentId": n => { citation.documentId = n.getStringValue(); },
        "fileId": n => { citation.fileId = n.getStringValue(); },
        "index": n => { citation.index = n.getStringValue(); },
        "link": n => { citation.link = n.getStringValue(); },
        "partitions": n => { citation.partitions = n.getCollectionOfObjectValues<Citation_Partition>(createCitation_PartitionFromDiscriminatorValue); },
        "sourceContentType": n => { citation.sourceContentType = n.getStringValue(); },
        "sourceName": n => { citation.sourceName = n.getStringValue(); },
        "sourceUrl": n => { citation.sourceUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCitation_Partition(citation_Partition: Partial<Citation_Partition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "lastUpdate": n => { citation_Partition.lastUpdate = n.getStringValue(); },
        "partitionNumber": n => { citation_Partition.partitionNumber = n.getNumberValue(); },
        "relevance": n => { citation_Partition.relevance = n.getNumberValue(); },
        "sectionNumber": n => { citation_Partition.sectionNumber = n.getNumberValue(); },
        "tags": n => { citation_Partition.tags = n.getCollectionOfObjectValues<KeyValuePairOfStringAndListOfString>(createKeyValuePairOfStringAndListOfStringFromDiscriminatorValue); },
        "text": n => { citation_Partition.text = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComplateFileCommandResponse(complateFileCommandResponse: Partial<ComplateFileCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComplateFileUploadCommand(complateFileUploadCommand: Partial<ComplateFileUploadCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fileId": n => { complateFileUploadCommand.fileId = n.getGuidValue(); },
        "isSuccess": n => { complateFileUploadCommand.isSuccess = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComplateUploadWikiDocumentCommand(complateUploadWikiDocumentCommand: Partial<ComplateUploadWikiDocumentCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fileId": n => { complateUploadWikiDocumentCommand.fileId = n.getGuidValue(); },
        "isSuccess": n => { complateUploadWikiDocumentCommand.isSuccess = n.getBooleanValue(); },
        "teamId": n => { complateUploadWikiDocumentCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { complateUploadWikiDocumentCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateTeamCommand(createTeamCommand: Partial<CreateTeamCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { createTeamCommand.description = n.getStringValue(); },
        "name": n => { createTeamCommand.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateWikiCommand(createWikiCommand: Partial<CreateWikiCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { createWikiCommand.description = n.getStringValue(); },
        "name": n => { createWikiCommand.name = n.getStringValue(); },
        "teamId": n => { createWikiCommand.teamId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeleteWikiCommand(deleteWikiCommand: Partial<DeleteWikiCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "teamId": n => { deleteWikiCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { deleteWikiCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDeleteWikiDocumentCommand(deleteWikiDocumentCommand: Partial<DeleteWikiDocumentCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "documentId": n => { deleteWikiDocumentCommand.documentId = n.getGuidValue(); },
        "teamId": n => { deleteWikiDocumentCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { deleteWikiDocumentCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmbeddingocumentCommand(embeddingocumentCommand: Partial<EmbeddingocumentCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "documentId": n => { embeddingocumentCommand.documentId = n.getGuidValue(); },
        "maxTokensPerParagraph": n => { embeddingocumentCommand.maxTokensPerParagraph = n.getNumberValue(); },
        "overlappingTokens": n => { embeddingocumentCommand.overlappingTokens = n.getNumberValue(); },
        "splitMethod": n => { embeddingocumentCommand.splitMethod = n.getStringValue(); },
        "teamId": n => { embeddingocumentCommand.teamId = n.getGuidValue(); },
        "tokenizer": n => { embeddingocumentCommand.tokenizer = n.getStringValue(); },
        "wikiId": n => { embeddingocumentCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmptyCommandResponse(emptyCommandResponse: Partial<EmptyCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExistResponse(existResponse: Partial<ExistResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "isExist": n => { existResponse.isExist = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIdResponse(idResponse: Partial<IdResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { idResponse.id = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInviteUserToTeamCommand(inviteUserToTeamCommand: Partial<InviteUserToTeamCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "userId": n => { inviteUserToTeamCommand.userId = n.getGuidValue(); },
        "userName": n => { inviteUserToTeamCommand.userName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeyValuePairOfStringAndListOfString(keyValuePairOfStringAndListOfString: Partial<KeyValuePairOfStringAndListOfString> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { keyValuePairOfStringAndListOfString.key = n.getStringValue(); },
        "value": n => { keyValuePairOfStringAndListOfString.value = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginCommand(loginCommand: Partial<LoginCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "password": n => { loginCommand.password = n.getStringValue(); },
        "userName": n => { loginCommand.userName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginCommandResponse(loginCommandResponse: Partial<LoginCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessToken": n => { loginCommandResponse.accessToken = n.getStringValue(); },
        "expiresIn": n => { loginCommandResponse.expiresIn = n.getStringValue(); },
        "refreshToken": n => { loginCommandResponse.refreshToken = n.getStringValue(); },
        "tokenType": n => { loginCommandResponse.tokenType = n.getStringValue(); },
        "userId": n => { loginCommandResponse.userId = n.getGuidValue(); },
        "userName": n => { loginCommandResponse.userName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoModelAbilities(modelAbilities: Partial<ModelAbilities> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "files": n => { modelAbilities.files = n.getBooleanValue(); },
        "functionCall": n => { modelAbilities.functionCall = n.getBooleanValue(); },
        "imageOutput": n => { modelAbilities.imageOutput = n.getBooleanValue(); },
        "vision": n => { modelAbilities.vision = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPagedParamter(pagedParamter: Partial<PagedParamter> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pageNo": n => { pagedParamter.pageNo = n.getNumberValue(); },
        "pageSize": n => { pagedParamter.pageSize = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPagedResultOfQueryTeamSimpleCommandResponse(pagedResultOfQueryTeamSimpleCommandResponse: Partial<PagedResultOfQueryTeamSimpleCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPagedParamter(pagedResultOfQueryTeamSimpleCommandResponse),
        "items": n => { pagedResultOfQueryTeamSimpleCommandResponse.items = n.getCollectionOfObjectValues<QueryTeamSimpleCommandResponse>(createQueryTeamSimpleCommandResponseFromDiscriminatorValue); },
        "total": n => { pagedResultOfQueryTeamSimpleCommandResponse.total = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPagedResultOfQueryWikiDocumentListItem(pagedResultOfQueryWikiDocumentListItem: Partial<PagedResultOfQueryWikiDocumentListItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPagedParamter(pagedResultOfQueryWikiDocumentListItem),
        "items": n => { pagedResultOfQueryWikiDocumentListItem.items = n.getCollectionOfObjectValues<QueryWikiDocumentListItem>(createQueryWikiDocumentListItemFromDiscriminatorValue); },
        "total": n => { pagedResultOfQueryWikiDocumentListItem.total = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPagedResultOfTeamMemberResponse(pagedResultOfTeamMemberResponse: Partial<PagedResultOfTeamMemberResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPagedParamter(pagedResultOfTeamMemberResponse),
        "items": n => { pagedResultOfTeamMemberResponse.items = n.getCollectionOfObjectValues<TeamMemberResponse>(createTeamMemberResponseFromDiscriminatorValue); },
        "total": n => { pagedResultOfTeamMemberResponse.total = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPreloadWikiDocumentResponse(preloadWikiDocumentResponse: Partial<PreloadWikiDocumentResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expiration": n => { preloadWikiDocumentResponse.expiration = n.getStringValue(); },
        "fileId": n => { preloadWikiDocumentResponse.fileId = n.getGuidValue(); },
        "isExist": n => { preloadWikiDocumentResponse.isExist = n.getBooleanValue(); },
        "uploadUrl": n => { preloadWikiDocumentResponse.uploadUrl = n.getStringValue(); },
        "visibility": n => { preloadWikiDocumentResponse.visibility = n.getEnumValue<FileVisibility>(FileVisibilityObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPreUploadFileCommandResponse(preUploadFileCommandResponse: Partial<PreUploadFileCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "expiration": n => { preUploadFileCommandResponse.expiration = n.getStringValue(); },
        "fileId": n => { preUploadFileCommandResponse.fileId = n.getGuidValue(); },
        "isExist": n => { preUploadFileCommandResponse.isExist = n.getBooleanValue(); },
        "uploadUrl": n => { preUploadFileCommandResponse.uploadUrl = n.getStringValue(); },
        "visibility": n => { preUploadFileCommandResponse.visibility = n.getEnumValue<FileVisibility>(FileVisibilityObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPreUploadImageCommand(preUploadImageCommand: Partial<PreUploadImageCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "contentType": n => { preUploadImageCommand.contentType = n.getStringValue(); },
        "fileName": n => { preUploadImageCommand.fileName = n.getStringValue(); },
        "fileSize": n => { preUploadImageCommand.fileSize = n.getNumberValue(); },
        "imageType": n => { preUploadImageCommand.imageType = n.getEnumValue<UploadImageType>(UploadImageTypeObject); },
        "mD5": n => { preUploadImageCommand.mD5 = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPreUploadWikiDocumentCommand(preUploadWikiDocumentCommand: Partial<PreUploadWikiDocumentCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "contentType": n => { preUploadWikiDocumentCommand.contentType = n.getStringValue(); },
        "fileName": n => { preUploadWikiDocumentCommand.fileName = n.getStringValue(); },
        "fileSize": n => { preUploadWikiDocumentCommand.fileSize = n.getNumberValue(); },
        "mD5": n => { preUploadWikiDocumentCommand.mD5 = n.getStringValue(); },
        "teamId": n => { preUploadWikiDocumentCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { preUploadWikiDocumentCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryAiModelListCommand(queryAiModelListCommand: Partial<QueryAiModelListCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "aiModelType": n => { queryAiModelListCommand.aiModelType = n.getEnumValue<AiModelType>(AiModelTypeObject); },
        "provider": n => { queryAiModelListCommand.provider = n.getEnumValue<AiProvider>(AiProviderObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryAiModelListCommandResponse(queryAiModelListCommandResponse: Partial<QueryAiModelListCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "aiModels": n => { queryAiModelListCommandResponse.aiModels = n.getCollectionOfObjectValues<AiNotKeyEndpoint>(createAiNotKeyEndpointFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryAiModelProviderCount(queryAiModelProviderCount: Partial<QueryAiModelProviderCount> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "count": n => { queryAiModelProviderCount.count = n.getNumberValue(); },
        "provider": n => { queryAiModelProviderCount.provider = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryAiModelProviderListResponse(queryAiModelProviderListResponse: Partial<QueryAiModelProviderListResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "providers": n => { queryAiModelProviderListResponse.providers = n.getCollectionOfObjectValues<QueryAiModelProviderCount>(createQueryAiModelProviderCountFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryDefaultAiModelListCommand(queryDefaultAiModelListCommand: Partial<QueryDefaultAiModelListCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "aiModelType": n => { queryDefaultAiModelListCommand.aiModelType = n.getEnumValue<AiModelType>(AiModelTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryDefaultAiModelListResponse(queryDefaultAiModelListResponse: Partial<QueryDefaultAiModelListResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "aiModels": n => { queryDefaultAiModelListResponse.aiModels = n.getCollectionOfObjectValues<AiNotKeyEndpoint>(createAiNotKeyEndpointFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryRepeatedUserNameCommand(queryRepeatedUserNameCommand: Partial<QueryRepeatedUserNameCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "userName": n => { queryRepeatedUserNameCommand.userName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryServerInfoResponse(queryServerInfoResponse: Partial<QueryServerInfoResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "publicStoreUrl": n => { queryServerInfoResponse.publicStoreUrl = n.getStringValue(); },
        "rsaPublic": n => { queryServerInfoResponse.rsaPublic = n.getStringValue(); },
        "serviceUrl": n => { queryServerInfoResponse.serviceUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryTeamDetailCommandResponse(queryTeamDetailCommandResponse: Partial<QueryTeamDetailCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuditsInfo(queryTeamDetailCommandResponse),
        "avatarUrl": n => { queryTeamDetailCommandResponse.avatarUrl = n.getStringValue(); },
        "description": n => { queryTeamDetailCommandResponse.description = n.getStringValue(); },
        "id": n => { queryTeamDetailCommandResponse.id = n.getGuidValue(); },
        "isAdmin": n => { queryTeamDetailCommandResponse.isAdmin = n.getBooleanValue(); },
        "isDisable": n => { queryTeamDetailCommandResponse.isDisable = n.getBooleanValue(); },
        "isPublic": n => { queryTeamDetailCommandResponse.isPublic = n.getBooleanValue(); },
        "isRoot": n => { queryTeamDetailCommandResponse.isRoot = n.getBooleanValue(); },
        "markdown": n => { queryTeamDetailCommandResponse.markdown = n.getStringValue(); },
        "name": n => { queryTeamDetailCommandResponse.name = n.getStringValue(); },
        "ownUserId": n => { queryTeamDetailCommandResponse.ownUserId = n.getGuidValue(); },
        "ownUserName": n => { queryTeamDetailCommandResponse.ownUserName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryTeamMemberListCommand(queryTeamMemberListCommand: Partial<QueryTeamMemberListCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPagedParamter(queryTeamMemberListCommand),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryTeamNameCommand(queryTeamNameCommand: Partial<QueryTeamNameCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { queryTeamNameCommand.id = n.getGuidValue(); },
        "name": n => { queryTeamNameCommand.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryTeamSimpleCommandResponse(queryTeamSimpleCommandResponse: Partial<QueryTeamSimpleCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuditsInfo(queryTeamSimpleCommandResponse),
        "avatarUrl": n => { queryTeamSimpleCommandResponse.avatarUrl = n.getStringValue(); },
        "description": n => { queryTeamSimpleCommandResponse.description = n.getStringValue(); },
        "id": n => { queryTeamSimpleCommandResponse.id = n.getGuidValue(); },
        "isAdmin": n => { queryTeamSimpleCommandResponse.isAdmin = n.getBooleanValue(); },
        "isDisable": n => { queryTeamSimpleCommandResponse.isDisable = n.getBooleanValue(); },
        "isPublic": n => { queryTeamSimpleCommandResponse.isPublic = n.getBooleanValue(); },
        "isRoot": n => { queryTeamSimpleCommandResponse.isRoot = n.getBooleanValue(); },
        "name": n => { queryTeamSimpleCommandResponse.name = n.getStringValue(); },
        "ownUserId": n => { queryTeamSimpleCommandResponse.ownUserId = n.getGuidValue(); },
        "ownUserName": n => { queryTeamSimpleCommandResponse.ownUserName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryUserInfoCommandResponse(queryUserInfoCommandResponse: Partial<QueryUserInfoCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "avatar": n => { queryUserInfoCommandResponse.avatar = n.getStringValue(); },
        "nickName": n => { queryUserInfoCommandResponse.nickName = n.getStringValue(); },
        "userId": n => { queryUserInfoCommandResponse.userId = n.getGuidValue(); },
        "userName": n => { queryUserInfoCommandResponse.userName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryUserJoinedTeamCommand(queryUserJoinedTeamCommand: Partial<QueryUserJoinedTeamCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPagedParamter(queryUserJoinedTeamCommand),
        "isAdmin": n => { queryUserJoinedTeamCommand.isAdmin = n.getBooleanValue(); },
        "isRoot": n => { queryUserJoinedTeamCommand.isRoot = n.getBooleanValue(); },
        "keyword": n => { queryUserJoinedTeamCommand.keyword = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiConfigCommandResponse(queryWikiConfigCommandResponse: Partial<QueryWikiConfigCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuditsInfo(queryWikiConfigCommandResponse),
        "embeddingBatchSize": n => { queryWikiConfigCommandResponse.embeddingBatchSize = n.getNumberValue(); },
        "embeddingDimensions": n => { queryWikiConfigCommandResponse.embeddingDimensions = n.getNumberValue(); },
        "embeddingModelId": n => { queryWikiConfigCommandResponse.embeddingModelId = n.getGuidValue(); },
        "embeddingModelTokenizer": n => { queryWikiConfigCommandResponse.embeddingModelTokenizer = n.getStringValue(); },
        "isLock": n => { queryWikiConfigCommandResponse.isLock = n.getBooleanValue(); },
        "maxRetries": n => { queryWikiConfigCommandResponse.maxRetries = n.getNumberValue(); },
        "wikiId": n => { queryWikiConfigCommandResponse.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiDetailInfoCommand(queryWikiDetailInfoCommand: Partial<QueryWikiDetailInfoCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "teamId": n => { queryWikiDetailInfoCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { queryWikiDetailInfoCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiDetailInfoResponse(queryWikiDetailInfoResponse: Partial<QueryWikiDetailInfoResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "avatarUrl": n => { queryWikiDetailInfoResponse.avatarUrl = n.getStringValue(); },
        "description": n => { queryWikiDetailInfoResponse.description = n.getStringValue(); },
        "isPublic": n => { queryWikiDetailInfoResponse.isPublic = n.getBooleanValue(); },
        "markdown": n => { queryWikiDetailInfoResponse.markdown = n.getStringValue(); },
        "name": n => { queryWikiDetailInfoResponse.name = n.getStringValue(); },
        "wikiId": n => { queryWikiDetailInfoResponse.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiDocumentInfoCommand(queryWikiDocumentInfoCommand: Partial<QueryWikiDocumentInfoCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "documentId": n => { queryWikiDocumentInfoCommand.documentId = n.getGuidValue(); },
        "teamId": n => { queryWikiDocumentInfoCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { queryWikiDocumentInfoCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiDocumentListCommand(queryWikiDocumentListCommand: Partial<QueryWikiDocumentListCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPagedParamter(queryWikiDocumentListCommand),
        "query": n => { queryWikiDocumentListCommand.query = n.getStringValue(); },
        "teamId": n => { queryWikiDocumentListCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { queryWikiDocumentListCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiDocumentListItem(queryWikiDocumentListItem: Partial<QueryWikiDocumentListItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuditsInfo(queryWikiDocumentListItem),
        "contentType": n => { queryWikiDocumentListItem.contentType = n.getStringValue(); },
        "documentId": n => { queryWikiDocumentListItem.documentId = n.getGuidValue(); },
        "fileName": n => { queryWikiDocumentListItem.fileName = n.getStringValue(); },
        "fileSize": n => { queryWikiDocumentListItem.fileSize = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiDocumentListResponse(queryWikiDocumentListResponse: Partial<QueryWikiDocumentListResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPagedResultOfQueryWikiDocumentListItem(queryWikiDocumentListResponse),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiDocumentTaskListCommand(queryWikiDocumentTaskListCommand: Partial<QueryWikiDocumentTaskListCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "documentId": n => { queryWikiDocumentTaskListCommand.documentId = n.getGuidValue(); },
        "teamId": n => { queryWikiDocumentTaskListCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { queryWikiDocumentTaskListCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiSimpleInfoCommand(queryWikiSimpleInfoCommand: Partial<QueryWikiSimpleInfoCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "teamId": n => { queryWikiSimpleInfoCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { queryWikiSimpleInfoCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueryWikiSimpleInfoResponse(queryWikiSimpleInfoResponse: Partial<QueryWikiSimpleInfoResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "avatarUrl": n => { queryWikiSimpleInfoResponse.avatarUrl = n.getStringValue(); },
        "description": n => { queryWikiSimpleInfoResponse.description = n.getStringValue(); },
        "isPublic": n => { queryWikiSimpleInfoResponse.isPublic = n.getBooleanValue(); },
        "name": n => { queryWikiSimpleInfoResponse.name = n.getStringValue(); },
        "wikiId": n => { queryWikiSimpleInfoResponse.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRefreshTokenCommand(refreshTokenCommand: Partial<RefreshTokenCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "refreshToken": n => { refreshTokenCommand.refreshToken = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegisterUserCommand(registerUserCommand: Partial<RegisterUserCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { registerUserCommand.email = n.getStringValue(); },
        "nickName": n => { registerUserCommand.nickName = n.getStringValue(); },
        "password": n => { registerUserCommand.password = n.getStringValue(); },
        "phone": n => { registerUserCommand.phone = n.getStringValue(); },
        "userName": n => { registerUserCommand.userName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRemoveTeamMemberCommand(removeTeamMemberCommand: Partial<RemoveTeamMemberCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "userId": n => { removeTeamMemberCommand.userId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSearchResult(searchResult: Partial<SearchResult> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "noResult": n => { searchResult.noResult = n.getBooleanValue(); },
        "query": n => { searchResult.query = n.getStringValue(); },
        "results": n => { searchResult.results = n.getCollectionOfObjectValues<Citation>(createCitationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSearchWikiDocumentTextCommand(searchWikiDocumentTextCommand: Partial<SearchWikiDocumentTextCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "documentId": n => { searchWikiDocumentTextCommand.documentId = n.getGuidValue(); },
        "query": n => { searchWikiDocumentTextCommand.query = n.getStringValue(); },
        "teamId": n => { searchWikiDocumentTextCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { searchWikiDocumentTextCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSearchWikiDocumentTextCommandResponse(searchWikiDocumentTextCommandResponse: Partial<SearchWikiDocumentTextCommandResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "searchResult": n => { searchWikiDocumentTextCommandResponse.searchResult = n.getObjectValue<SearchResult>(createSearchResultFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSetDefaultAiModelCommand(setDefaultAiModelCommand: Partial<SetDefaultAiModelCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "aiModelType": n => { setDefaultAiModelCommand.aiModelType = n.getEnumValue<AiModelType>(AiModelTypeObject); },
        "modelId": n => { setDefaultAiModelCommand.modelId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSetTeamAdminCommand(setTeamAdminCommand: Partial<SetTeamAdminCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "isAdmin": n => { setTeamAdminCommand.isAdmin = n.getBooleanValue(); },
        "userId": n => { setTeamAdminCommand.userId = n.getGuidValue(); },
        "userName": n => { setTeamAdminCommand.userName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSetWikiDefaultModelCommand(setWikiDefaultModelCommand: Partial<SetWikiDefaultModelCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "modelId": n => { setWikiDefaultModelCommand.modelId = n.getGuidValue(); },
        "teamId": n => { setWikiDefaultModelCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { setWikiDefaultModelCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSimpleOfBoolean(simpleOfBoolean: Partial<SimpleOfBoolean> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "data": n => { simpleOfBoolean.data = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSimpleOfString(simpleOfString: Partial<SimpleOfString> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "data": n => { simpleOfString.data = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamMemberResponse(teamMemberResponse: Partial<TeamMemberResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuditsInfo(teamMemberResponse),
        "isAdmin": n => { teamMemberResponse.isAdmin = n.getBooleanValue(); },
        "isOwner": n => { teamMemberResponse.isOwner = n.getBooleanValue(); },
        "nickName": n => { teamMemberResponse.nickName = n.getStringValue(); },
        "userAvatarPath": n => { teamMemberResponse.userAvatarPath = n.getStringValue(); },
        "userId": n => { teamMemberResponse.userId = n.getGuidValue(); },
        "userName": n => { teamMemberResponse.userName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateAiEndpointRequest(updateAiEndpointRequest: Partial<UpdateAiEndpointRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAiEndpoint(updateAiEndpointRequest),
        "modelId": n => { updateAiEndpointRequest.modelId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateTeamInfoCommand(updateTeamInfoCommand: Partial<UpdateTeamInfoCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { updateTeamInfoCommand.description = n.getStringValue(); },
        "isDisable": n => { updateTeamInfoCommand.isDisable = n.getBooleanValue(); },
        "isPublic": n => { updateTeamInfoCommand.isPublic = n.getBooleanValue(); },
        "markdown": n => { updateTeamInfoCommand.markdown = n.getStringValue(); },
        "name": n => { updateTeamInfoCommand.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateUserPasswordCommand(updateUserPasswordCommand: Partial<UpdateUserPasswordCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "password": n => { updateUserPasswordCommand.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateWikiConfigCommand(updateWikiConfigCommand: Partial<UpdateWikiConfigCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "config": n => { updateWikiConfigCommand.config = n.getObjectValue<WikiConfig>(createWikiConfigFromDiscriminatorValue); },
        "teamId": n => { updateWikiConfigCommand.teamId = n.getGuidValue(); },
        "wikiId": n => { updateWikiConfigCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateWikiInfoCommand(updateWikiInfoCommand: Partial<UpdateWikiInfoCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { updateWikiInfoCommand.description = n.getStringValue(); },
        "isPublic": n => { updateWikiInfoCommand.isPublic = n.getBooleanValue(); },
        "markdown": n => { updateWikiInfoCommand.markdown = n.getStringValue(); },
        "name": n => { updateWikiInfoCommand.name = n.getStringValue(); },
        "wikiId": n => { updateWikiInfoCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUploadTeamAvatarCommand(uploadTeamAvatarCommand: Partial<UploadTeamAvatarCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fileId": n => { uploadTeamAvatarCommand.fileId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUploadtUserAvatarCommand(uploadtUserAvatarCommand: Partial<UploadtUserAvatarCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fileId": n => { uploadtUserAvatarCommand.fileId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUploadWikiAvatarCommand(uploadWikiAvatarCommand: Partial<UploadWikiAvatarCommand> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "fileId": n => { uploadWikiAvatarCommand.fileId = n.getGuidValue(); },
        "wikiId": n => { uploadWikiAvatarCommand.wikiId = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWikiConfig(wikiConfig: Partial<WikiConfig> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "embeddingBatchSize": n => { wikiConfig.embeddingBatchSize = n.getNumberValue(); },
        "embeddingDimensions": n => { wikiConfig.embeddingDimensions = n.getNumberValue(); },
        "embeddingModelId": n => { wikiConfig.embeddingModelId = n.getGuidValue(); },
        "embeddingModelTokenizer": n => { wikiConfig.embeddingModelTokenizer = n.getStringValue(); },
        "maxRetries": n => { wikiConfig.maxRetries = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWikiDocumentTaskItem(wikiDocumentTaskItem: Partial<WikiDocumentTaskItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuditsInfo(wikiDocumentTaskItem),
        "contentType": n => { wikiDocumentTaskItem.contentType = n.getStringValue(); },
        "documentId": n => { wikiDocumentTaskItem.documentId = n.getGuidValue(); },
        "fileId": n => { wikiDocumentTaskItem.fileId = n.getGuidValue(); },
        "fileName": n => { wikiDocumentTaskItem.fileName = n.getStringValue(); },
        "fileSize": n => { wikiDocumentTaskItem.fileSize = n.getStringValue(); },
        "id": n => { wikiDocumentTaskItem.id = n.getGuidValue(); },
        "maxTokensPerParagraph": n => { wikiDocumentTaskItem.maxTokensPerParagraph = n.getNumberValue(); },
        "message": n => { wikiDocumentTaskItem.message = n.getStringValue(); },
        "overlappingTokens": n => { wikiDocumentTaskItem.overlappingTokens = n.getNumberValue(); },
        "state": n => { wikiDocumentTaskItem.state = n.getEnumValue<FileEmbeddingState>(FileEmbeddingStateObject); },
        "taskTag": n => { wikiDocumentTaskItem.taskTag = n.getStringValue(); },
        "teamId": n => { wikiDocumentTaskItem.teamId = n.getGuidValue(); },
        "tokenizer": n => { wikiDocumentTaskItem.tokenizer = n.getStringValue(); },
        "wikiId": n => { wikiDocumentTaskItem.wikiId = n.getGuidValue(); },
    }
}
/**
 * 向量化文档.
 */
export interface EmbeddingocumentCommand extends Parsable {
    /**
     * 文档 id.
     */
    documentId?: Guid | null;
    /**
     * 每个段落最大 token 数量.
     */
    maxTokensPerParagraph?: number | null;
    /**
     * 块之间重叠令牌的数量.
     */
    overlappingTokens?: number | null;
    /**
     * 文本分割方法，暂时不支持使用.
     */
    splitMethod?: string | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 统计 tokens 数量的算法 支持: "p50k", "cl100k", "o200k".
     */
    tokenizer?: string | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
/**
 * 空数据.
 */
export interface EmptyCommandResponse extends Parsable {
}
/**
 * 数据是否存在.
 */
export interface ExistResponse extends Parsable {
    /**
     * 数据是否存在.
     */
    isExist?: boolean | null;
}
export type FileEmbeddingState = (typeof FileEmbeddingStateObject)[keyof typeof FileEmbeddingStateObject];
export type FileVisibility = (typeof FileVisibilityObject)[keyof typeof FileVisibilityObject];
/**
 * Guid.
 */
export interface IdResponse extends Parsable {
    /**
     * Guid.
     */
    id?: Guid | null;
}
/**
 * 邀请用户加入团队命令.
 */
export interface InviteUserToTeamCommand extends Parsable {
    /**
     * 被邀请的用户ID.
     */
    userId?: Guid | null;
    /**
     * 用户名.
     */
    userName?: string | null;
}
export interface KeyValuePairOfStringAndListOfString extends Parsable {
    /**
     * The key property
     */
    key?: string | null;
    /**
     * The value property
     */
    value?: string[] | null;
}
/**
 * 登录.
 */
export interface LoginCommand extends Parsable {
    /**
     * 密码，使用 RSA 公钥加密.
     */
    password?: string | null;
    /**
     * 用户名或邮箱.
     */
    userName?: string | null;
}
/**
 * 登录结果.
 */
export interface LoginCommandResponse extends Parsable {
    /**
     * 访问令牌.
     */
    accessToken?: string | null;
    /**
     * 过期时间（秒）.
     */
    expiresIn?: string | null;
    /**
     * 刷新令牌.
     */
    refreshToken?: string | null;
    /**
     * 令牌类型.
     */
    tokenType?: string | null;
    /**
     * 用户ID.
     */
    userId?: Guid | null;
    /**
     * 用户名.
     */
    userName?: string | null;
}
export interface ModelAbilities extends Parsable {
    /**
     * Whether model supports file upload
     */
    files?: boolean | null;
    /**
     * Whether model supports function call
     */
    functionCall?: boolean | null;
    /**
     * Whether model supports image output
     */
    imageOutput?: boolean | null;
    /**
     * Whether model supports vision
     */
    vision?: boolean | null;
}
/**
 * 分页参数.
 */
export interface PagedParamter extends Parsable {
    /**
     * 页码，从1开始.
     */
    pageNo?: number | null;
    /**
     * 每页大小.
     */
    pageSize?: number | null;
}
/**
 * 分页结果.
 */
export interface PagedResultOfQueryTeamSimpleCommandResponse extends PagedParamter, Parsable {
    /**
     * 项目集合.
     */
    items?: QueryTeamSimpleCommandResponse[] | null;
    /**
     * 总数.
     */
    total?: number | null;
}
/**
 * 分页结果.
 */
export interface PagedResultOfQueryWikiDocumentListItem extends PagedParamter, Parsable {
    /**
     * 项目集合.
     */
    items?: QueryWikiDocumentListItem[] | null;
    /**
     * 总数.
     */
    total?: number | null;
}
/**
 * 分页结果.
 */
export interface PagedResultOfTeamMemberResponse extends PagedParamter, Parsable {
    /**
     * 项目集合.
     */
    items?: TeamMemberResponse[] | null;
    /**
     * 总数.
     */
    total?: number | null;
}
export interface PreloadWikiDocumentResponse extends Parsable {
    /**
     * 签名过期时间，当 IsExist = true 时字段为空.
     */
    expiration?: string | null;
    /**
     * 文件ID.
     */
    fileId?: Guid | null;
    /**
     * 文件已存在,如果文件已存在则直接使用 FileId，无需再次上传.
     */
    isExist?: boolean | null;
    /**
     * 预签名上传地址，当 IsExist = true 时字段为空.
     */
    uploadUrl?: string | null;
    /**
     * 文件可见性.
     */
    visibility?: FileVisibility | null;
}
/**
 * 预上传文件.
 */
export interface PreUploadFileCommandResponse extends Parsable {
    /**
     * 签名过期时间，当 IsExist = true 时字段为空.
     */
    expiration?: string | null;
    /**
     * 文件ID.
     */
    fileId?: Guid | null;
    /**
     * 文件已存在,如果文件已存在则直接使用 FileId，无需再次上传.
     */
    isExist?: boolean | null;
    /**
     * 预签名上传地址，当 IsExist = true 时字段为空.
     */
    uploadUrl?: string | null;
    /**
     * 文件可见性.
     */
    visibility?: FileVisibility | null;
}
/**
 * 上传图像，例如头像、公有图像等，文件公开访问，都根路径下.
 */
export interface PreUploadImageCommand extends Parsable {
    /**
     * 文件类型.
     */
    contentType?: string | null;
    /**
     * 文件名称.
     */
    fileName?: string | null;
    /**
     * 文件大小.
     */
    fileSize?: number | null;
    /**
     * 文件类型根据具体的功能模块决定.
     */
    imageType?: UploadImageType | null;
    /**
     * 文件 MD5.
     */
    mD5?: string | null;
}
/**
 * 预上传知识库文件.
 */
export interface PreUploadWikiDocumentCommand extends Parsable {
    /**
     * 文件类型.
     */
    contentType?: string | null;
    /**
     * 文件名称.
     */
    fileName?: string | null;
    /**
     * 文件大小.
     */
    fileSize?: number | null;
    /**
     * 文件 MD5.
     */
    mD5?: string | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.            
     */
    wikiId?: Guid | null;
}
/**
 * 查询模型列表.
 */
export interface QueryAiModelListCommand extends Parsable {
    /**
     * Ai 模型类型.
     */
    aiModelType?: AiModelType | null;
    /**
     * AI 模型类型.
     */
    provider?: AiProvider | null;
}
/**
 * Ai 模型列表.
 */
export interface QueryAiModelListCommandResponse extends Parsable {
    /**
     * AI 模型列表.
     */
    aiModels?: AiNotKeyEndpoint[] | null;
}
/**
 * AI 模型数量.
 */
export interface QueryAiModelProviderCount extends Parsable {
    /**
     * 模型数量.
     */
    count?: number | null;
    /**
     * 供应商名称.
     */
    provider?: string | null;
}
/**
 * AI 模型供应商和已添加的ai模型数量列表.
 */
export interface QueryAiModelProviderListResponse extends Parsable {
    /**
     * AI 服务商列表，{ai服务提供商,模型数量}.
     */
    providers?: QueryAiModelProviderCount[] | null;
}
/**
 * 查询供应商模型默认列表，获取在某个功能需求下默认使用的模型.
 */
export interface QueryDefaultAiModelListCommand extends Parsable {
    /**
     * 模型类型.
     */
    aiModelType?: AiModelType | null;
}
export interface QueryDefaultAiModelListResponse extends Parsable {
    /**
     * The aiModels property
     */
    aiModels?: AiNotKeyEndpoint[] | null;
}
/**
 * 检查用户名是否重复.
 */
export interface QueryRepeatedUserNameCommand extends Parsable {
    /**
     * 用户名.
     */
    userName?: string | null;
}
export interface QueryServerInfoResponse extends Parsable {
    /**
     * 公共存储地址，静态资源时可直接访问.
     */
    publicStoreUrl?: string | null;
    /**
     * RSA 公钥，用于加密密码等信息传输到服务器.
     */
    rsaPublic?: string | null;
    /**
     * 系统访问地址.
     */
    serviceUrl?: string | null;
}
/**
 * 团队详细信息.
 */
export interface QueryTeamDetailCommandResponse extends AuditsInfo, Parsable {
    /**
     * 团队头像路径.
     */
    avatarUrl?: string | null;
    /**
     * 团队描述.
     */
    description?: string | null;
    /**
     * 团队ID.
     */
    id?: Guid | null;
    /**
     * 是否管理员.
     */
    isAdmin?: boolean | null;
    /**
     * 团队已被禁用.
     */
    isDisable?: boolean | null;
    /**
     * 是否公开,能够被外部搜索.
     */
    isPublic?: boolean | null;
    /**
     * 是否所有者.
     */
    isRoot?: boolean | null;
    /**
     * 团队详细介绍.
     */
    markdown?: string | null;
    /**
     * 团队名称.
     */
    name?: string | null;
    /**
     * 所有者 id.
     */
    ownUserId?: Guid | null;
    /**
     * 所有人名字.
     */
    ownUserName?: string | null;
}
/**
 * 查询团队成员列表.
 */
export interface QueryTeamMemberListCommand extends PagedParamter, Parsable {
}
/**
 * 检查团队名称是否存在.
 */
export interface QueryTeamNameCommand extends Parsable {
    /**
     * 团队ID.
     */
    id?: Guid | null;
    /**
     * 团队名称.
     */
    name?: string | null;
}
/**
 * 团队基础信息.
 */
export interface QueryTeamSimpleCommandResponse extends AuditsInfo, Parsable {
    /**
     * 团队头像路径.
     */
    avatarUrl?: string | null;
    /**
     * 团队描述.
     */
    description?: string | null;
    /**
     * 团队ID.
     */
    id?: Guid | null;
    /**
     * 是否管理员.
     */
    isAdmin?: boolean | null;
    /**
     * 团队已被禁用.
     */
    isDisable?: boolean | null;
    /**
     * 是否公开,能够被外部搜索.
     */
    isPublic?: boolean | null;
    /**
     * 是否所有者.
     */
    isRoot?: boolean | null;
    /**
     * 团队名称.
     */
    name?: string | null;
    /**
     * 所有者 id.
     */
    ownUserId?: Guid | null;
    /**
     * 所有人名字.
     */
    ownUserName?: string | null;
}
/**
 * 用户基本信息响应.
 */
export interface QueryUserInfoCommandResponse extends Parsable {
    /**
     * 头像路径.
     */
    avatar?: string | null;
    /**
     * 昵称.
     */
    nickName?: string | null;
    /**
     * 用户 ID.
     */
    userId?: Guid | null;
    /**
     * 用户名.
     */
    userName?: string | null;
}
/**
 * 分页查询用户已加入的团队列表.
 */
export interface QueryUserJoinedTeamCommand extends PagedParamter, Parsable {
    /**
     * 当前用户有管理员权限的.
     */
    isAdmin?: boolean | null;
    /**
     * 当前用户所有的.
     */
    isRoot?: boolean | null;
    /**
     * 查询关键字.
     */
    keyword?: string | null;
}
export interface QueryWikiConfigCommandResponse extends AuditsInfo, Parsable {
    /**
     * 批处理大小.
     */
    embeddingBatchSize?: number | null;
    /**
     * 维度，跟模型有关.
     */
    embeddingDimensions?: number | null;
    /**
     * 指定进行文档向量化的模型.
     */
    embeddingModelId?: Guid | null;
    /**
     * 分词器.
     */
    embeddingModelTokenizer?: string | null;
    /**
     * 锁定配置，锁定后不能再修改.
     */
    isLock?: boolean | null;
    /**
     * 最大重试次数.
     */
    maxRetries?: number | null;
    /**
     * 知识库id.
     */
    wikiId?: Guid | null;
}
/**
 * 查询知识库详细信息.
 */
export interface QueryWikiDetailInfoCommand extends Parsable {
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
export interface QueryWikiDetailInfoResponse extends Parsable {
    /**
     * 团队头像路径.
     */
    avatarUrl?: string | null;
    /**
     * 知识库描述.
     */
    description?: string | null;
    /**
     * 公开使用，所有人不需要加入团队即可使用此知识库.
     */
    isPublic?: boolean | null;
    /**
     * 知识库详细介绍.
     */
    markdown?: string | null;
    /**
     * 知识库名称.
     */
    name?: string | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
/**
 * 查询单个文档信息.
 */
export interface QueryWikiDocumentInfoCommand extends Parsable {
    /**
     * 文档 id.
     */
    documentId?: Guid | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
/**
 * 查询 wiki 文件列表.
 */
export interface QueryWikiDocumentListCommand extends PagedParamter, Parsable {
    /**
     * 筛选文件名称.
     */
    query?: string | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
export interface QueryWikiDocumentListItem extends AuditsInfo, Parsable {
    /**
     * The contentType property
     */
    contentType?: string | null;
    /**
     * The documentId property
     */
    documentId?: Guid | null;
    /**
     * The fileName property
     */
    fileName?: string | null;
    /**
     * The fileSize property
     */
    fileSize?: string | null;
}
export interface QueryWikiDocumentListResponse extends PagedResultOfQueryWikiDocumentListItem, Parsable {
}
/**
 * 查询文档任务列表.
 */
export interface QueryWikiDocumentTaskListCommand extends Parsable {
    /**
     * 文档id.
     */
    documentId?: Guid | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库id.
     */
    wikiId?: Guid | null;
}
/**
 * 获取知识库简单信息.
 */
export interface QueryWikiSimpleInfoCommand extends Parsable {
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
export interface QueryWikiSimpleInfoResponse extends Parsable {
    /**
     * 团队头像路径.
     */
    avatarUrl?: string | null;
    /**
     * 知识库描述.
     */
    description?: string | null;
    /**
     * 公开使用，所有人不需要加入团队即可使用此知识库.
     */
    isPublic?: boolean | null;
    /**
     * 知识库名称.
     */
    name?: string | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
/**
 * 刷新 token.
 */
export interface RefreshTokenCommand extends Parsable {
    /**
     * 刷新令牌.
     */
    refreshToken?: string | null;
}
/**
 * 注册用户.
 */
export interface RegisterUserCommand extends Parsable {
    /**
     * 邮箱.
     */
    email?: string | null;
    /**
     * 昵称.
     */
    nickName?: string | null;
    /**
     * 密码，接口请求时，使用 RSA 公钥加密密码.
     */
    password?: string | null;
    /**
     * 手机号.
     */
    phone?: string | null;
    /**
     * 用户名.
     */
    userName?: string | null;
}
/**
 * 移除团队成员命令.
 */
export interface RemoveTeamMemberCommand extends Parsable {
    /**
     * 要移除的团队成员ID.
     */
    userId?: Guid | null;
}
export interface SearchResult extends Parsable {
    /**
     * Whether the search didn't return any result
     */
    noResult?: boolean | null;
    /**
     * Client question.
     */
    query?: string | null;
    /**
     * List of the relevant sources used to produce the answer.Key = Document IDValue = List of partitions used from the document.
     */
    results?: Citation[] | null;
}
/**
 * 搜索知识库文档分片.
 */
export interface SearchWikiDocumentTextCommand extends Parsable {
    /**
     * 文档id，不设置时搜索整个知识库.
     */
    documentId?: Guid | null;
    /**
     * 搜索文本，区配文本.
     */
    query?: string | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.            
     */
    wikiId?: Guid | null;
}
export interface SearchWikiDocumentTextCommandResponse extends Parsable {
    /**
     * The searchResult property
     */
    searchResult?: SearchResult | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddAiEndpointRequest(writer: SerializationWriter, addAiEndpointRequest: Partial<AddAiEndpointRequest> | undefined | null = {}) : void {
    if (addAiEndpointRequest) {
        serializeAiEndpoint(writer, addAiEndpointRequest)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiEndpoint(writer: SerializationWriter, aiEndpoint: Partial<AiEndpoint> | undefined | null = {}) : void {
    if (aiEndpoint) {
        writer.writeObjectValue<ModelAbilities>("abilities", aiEndpoint.abilities, serializeModelAbilities);
        writer.writeEnumValue<AiModelType>("aiModelType", aiEndpoint.aiModelType);
        writer.writeNumberValue("contextWindowTokens", aiEndpoint.contextWindowTokens);
        writer.writeStringValue("deploymentName", aiEndpoint.deploymentName);
        writer.writeStringValue("displayName", aiEndpoint.displayName);
        writer.writeStringValue("endpoint", aiEndpoint.endpoint);
        writer.writeStringValue("key", aiEndpoint.key);
        writer.writeNumberValue("maxDimension", aiEndpoint.maxDimension);
        writer.writeStringValue("name", aiEndpoint.name);
        writer.writeEnumValue<AiProvider>("provider", aiEndpoint.provider);
        writer.writeNumberValue("textOutput", aiEndpoint.textOutput);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiNotKeyEndpoint(writer: SerializationWriter, aiNotKeyEndpoint: Partial<AiNotKeyEndpoint> | undefined | null = {}) : void {
    if (aiNotKeyEndpoint) {
        writer.writeObjectValue<ModelAbilities>("abilities", aiNotKeyEndpoint.abilities, serializeModelAbilities);
        writer.writeEnumValue<AiModelType>("aiModelType", aiNotKeyEndpoint.aiModelType);
        writer.writeNumberValue("contextWindowTokens", aiNotKeyEndpoint.contextWindowTokens);
        writer.writeStringValue("deploymentName", aiNotKeyEndpoint.deploymentName);
        writer.writeStringValue("displayName", aiNotKeyEndpoint.displayName);
        writer.writeStringValue("endpoint", aiNotKeyEndpoint.endpoint);
        writer.writeGuidValue("id", aiNotKeyEndpoint.id);
        writer.writeNumberValue("maxDimension", aiNotKeyEndpoint.maxDimension);
        writer.writeStringValue("name", aiNotKeyEndpoint.name);
        writer.writeEnumValue<AiProvider>("provider", aiNotKeyEndpoint.provider);
        writer.writeNumberValue("textOutput", aiNotKeyEndpoint.textOutput);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAuditsInfo(writer: SerializationWriter, auditsInfo: Partial<AuditsInfo> | undefined | null = {}) : void {
    if (auditsInfo) {
        writer.writeStringValue("createTime", auditsInfo.createTime);
        writer.writeGuidValue("createUserId", auditsInfo.createUserId);
        writer.writeStringValue("createUserName", auditsInfo.createUserName);
        writer.writeStringValue("updateTime", auditsInfo.updateTime);
        writer.writeGuidValue("updateUserId", auditsInfo.updateUserId);
        writer.writeStringValue("updateUserName", auditsInfo.updateUserName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBusinessExceptionError(writer: SerializationWriter, businessExceptionError: Partial<BusinessExceptionError> | undefined | null = {}) : void {
    if (businessExceptionError) {
        writer.writeCollectionOfPrimitiveValues<string>("errors", businessExceptionError.errors);
        writer.writeStringValue("name", businessExceptionError.name);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBusinessExceptionResponse(writer: SerializationWriter, businessExceptionResponse: Partial<BusinessExceptionResponse> | undefined | null = {}) : void {
    if (businessExceptionResponse) {
        writer.writeNumberValue("code", businessExceptionResponse.code);
        writer.writeStringValue("detail", businessExceptionResponse.detail);
        writer.writeCollectionOfObjectValues<BusinessExceptionError>("errors", businessExceptionResponse.errors, serializeBusinessExceptionError);
        writer.writeObjectValue<BusinessExceptionResponse_extensions>("extensions", businessExceptionResponse.extensions, serializeBusinessExceptionResponse_extensions);
        writer.writeStringValue("requestId", businessExceptionResponse.requestId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBusinessExceptionResponse_extensions(writer: SerializationWriter, businessExceptionResponse_extensions: Partial<BusinessExceptionResponse_extensions> | undefined | null = {}) : void {
    if (businessExceptionResponse_extensions) {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCancalWikiDocumentTaskCommand(writer: SerializationWriter, cancalWikiDocumentTaskCommand: Partial<CancalWikiDocumentTaskCommand> | undefined | null = {}) : void {
    if (cancalWikiDocumentTaskCommand) {
        writer.writeGuidValue("documentId", cancalWikiDocumentTaskCommand.documentId);
        writer.writeGuidValue("taskId", cancalWikiDocumentTaskCommand.taskId);
        writer.writeGuidValue("teamId", cancalWikiDocumentTaskCommand.teamId);
        writer.writeGuidValue("wikiId", cancalWikiDocumentTaskCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCitation(writer: SerializationWriter, citation: Partial<Citation> | undefined | null = {}) : void {
    if (citation) {
        writer.writeStringValue("documentId", citation.documentId);
        writer.writeStringValue("fileId", citation.fileId);
        writer.writeStringValue("index", citation.index);
        writer.writeStringValue("link", citation.link);
        writer.writeCollectionOfObjectValues<Citation_Partition>("partitions", citation.partitions, serializeCitation_Partition);
        writer.writeStringValue("sourceContentType", citation.sourceContentType);
        writer.writeStringValue("sourceName", citation.sourceName);
        writer.writeStringValue("sourceUrl", citation.sourceUrl);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCitation_Partition(writer: SerializationWriter, citation_Partition: Partial<Citation_Partition> | undefined | null = {}) : void {
    if (citation_Partition) {
        writer.writeStringValue("lastUpdate", citation_Partition.lastUpdate);
        writer.writeNumberValue("partitionNumber", citation_Partition.partitionNumber);
        writer.writeNumberValue("relevance", citation_Partition.relevance);
        writer.writeNumberValue("sectionNumber", citation_Partition.sectionNumber);
        writer.writeCollectionOfObjectValues<KeyValuePairOfStringAndListOfString>("tags", citation_Partition.tags, serializeKeyValuePairOfStringAndListOfString);
        writer.writeStringValue("text", citation_Partition.text);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComplateFileCommandResponse(writer: SerializationWriter, complateFileCommandResponse: Partial<ComplateFileCommandResponse> | undefined | null = {}) : void {
    if (complateFileCommandResponse) {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComplateFileUploadCommand(writer: SerializationWriter, complateFileUploadCommand: Partial<ComplateFileUploadCommand> | undefined | null = {}) : void {
    if (complateFileUploadCommand) {
        writer.writeGuidValue("fileId", complateFileUploadCommand.fileId);
        writer.writeBooleanValue("isSuccess", complateFileUploadCommand.isSuccess);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComplateUploadWikiDocumentCommand(writer: SerializationWriter, complateUploadWikiDocumentCommand: Partial<ComplateUploadWikiDocumentCommand> | undefined | null = {}) : void {
    if (complateUploadWikiDocumentCommand) {
        writer.writeGuidValue("fileId", complateUploadWikiDocumentCommand.fileId);
        writer.writeBooleanValue("isSuccess", complateUploadWikiDocumentCommand.isSuccess);
        writer.writeGuidValue("teamId", complateUploadWikiDocumentCommand.teamId);
        writer.writeGuidValue("wikiId", complateUploadWikiDocumentCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateTeamCommand(writer: SerializationWriter, createTeamCommand: Partial<CreateTeamCommand> | undefined | null = {}) : void {
    if (createTeamCommand) {
        writer.writeStringValue("description", createTeamCommand.description);
        writer.writeStringValue("name", createTeamCommand.name);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateWikiCommand(writer: SerializationWriter, createWikiCommand: Partial<CreateWikiCommand> | undefined | null = {}) : void {
    if (createWikiCommand) {
        writer.writeStringValue("description", createWikiCommand.description);
        writer.writeStringValue("name", createWikiCommand.name);
        writer.writeGuidValue("teamId", createWikiCommand.teamId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeleteWikiCommand(writer: SerializationWriter, deleteWikiCommand: Partial<DeleteWikiCommand> | undefined | null = {}) : void {
    if (deleteWikiCommand) {
        writer.writeGuidValue("teamId", deleteWikiCommand.teamId);
        writer.writeGuidValue("wikiId", deleteWikiCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDeleteWikiDocumentCommand(writer: SerializationWriter, deleteWikiDocumentCommand: Partial<DeleteWikiDocumentCommand> | undefined | null = {}) : void {
    if (deleteWikiDocumentCommand) {
        writer.writeGuidValue("documentId", deleteWikiDocumentCommand.documentId);
        writer.writeGuidValue("teamId", deleteWikiDocumentCommand.teamId);
        writer.writeGuidValue("wikiId", deleteWikiDocumentCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmbeddingocumentCommand(writer: SerializationWriter, embeddingocumentCommand: Partial<EmbeddingocumentCommand> | undefined | null = {}) : void {
    if (embeddingocumentCommand) {
        writer.writeGuidValue("documentId", embeddingocumentCommand.documentId);
        writer.writeNumberValue("maxTokensPerParagraph", embeddingocumentCommand.maxTokensPerParagraph);
        writer.writeNumberValue("overlappingTokens", embeddingocumentCommand.overlappingTokens);
        writer.writeStringValue("splitMethod", embeddingocumentCommand.splitMethod);
        writer.writeGuidValue("teamId", embeddingocumentCommand.teamId);
        writer.writeStringValue("tokenizer", embeddingocumentCommand.tokenizer);
        writer.writeGuidValue("wikiId", embeddingocumentCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmptyCommandResponse(writer: SerializationWriter, emptyCommandResponse: Partial<EmptyCommandResponse> | undefined | null = {}) : void {
    if (emptyCommandResponse) {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExistResponse(writer: SerializationWriter, existResponse: Partial<ExistResponse> | undefined | null = {}) : void {
    if (existResponse) {
        writer.writeBooleanValue("isExist", existResponse.isExist);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIdResponse(writer: SerializationWriter, idResponse: Partial<IdResponse> | undefined | null = {}) : void {
    if (idResponse) {
        writer.writeGuidValue("id", idResponse.id);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInviteUserToTeamCommand(writer: SerializationWriter, inviteUserToTeamCommand: Partial<InviteUserToTeamCommand> | undefined | null = {}) : void {
    if (inviteUserToTeamCommand) {
        writer.writeGuidValue("userId", inviteUserToTeamCommand.userId);
        writer.writeStringValue("userName", inviteUserToTeamCommand.userName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeyValuePairOfStringAndListOfString(writer: SerializationWriter, keyValuePairOfStringAndListOfString: Partial<KeyValuePairOfStringAndListOfString> | undefined | null = {}) : void {
    if (keyValuePairOfStringAndListOfString) {
        writer.writeStringValue("key", keyValuePairOfStringAndListOfString.key);
        writer.writeCollectionOfPrimitiveValues<string>("value", keyValuePairOfStringAndListOfString.value);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginCommand(writer: SerializationWriter, loginCommand: Partial<LoginCommand> | undefined | null = {}) : void {
    if (loginCommand) {
        writer.writeStringValue("password", loginCommand.password);
        writer.writeStringValue("userName", loginCommand.userName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginCommandResponse(writer: SerializationWriter, loginCommandResponse: Partial<LoginCommandResponse> | undefined | null = {}) : void {
    if (loginCommandResponse) {
        writer.writeStringValue("accessToken", loginCommandResponse.accessToken);
        writer.writeStringValue("expiresIn", loginCommandResponse.expiresIn);
        writer.writeStringValue("refreshToken", loginCommandResponse.refreshToken);
        writer.writeStringValue("tokenType", loginCommandResponse.tokenType);
        writer.writeGuidValue("userId", loginCommandResponse.userId);
        writer.writeStringValue("userName", loginCommandResponse.userName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeModelAbilities(writer: SerializationWriter, modelAbilities: Partial<ModelAbilities> | undefined | null = {}) : void {
    if (modelAbilities) {
        writer.writeBooleanValue("files", modelAbilities.files);
        writer.writeBooleanValue("functionCall", modelAbilities.functionCall);
        writer.writeBooleanValue("imageOutput", modelAbilities.imageOutput);
        writer.writeBooleanValue("vision", modelAbilities.vision);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePagedParamter(writer: SerializationWriter, pagedParamter: Partial<PagedParamter> | undefined | null = {}) : void {
    if (pagedParamter) {
        writer.writeNumberValue("pageNo", pagedParamter.pageNo);
        writer.writeNumberValue("pageSize", pagedParamter.pageSize);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePagedResultOfQueryTeamSimpleCommandResponse(writer: SerializationWriter, pagedResultOfQueryTeamSimpleCommandResponse: Partial<PagedResultOfQueryTeamSimpleCommandResponse> | undefined | null = {}) : void {
    if (pagedResultOfQueryTeamSimpleCommandResponse) {
        serializePagedParamter(writer, pagedResultOfQueryTeamSimpleCommandResponse)
        writer.writeCollectionOfObjectValues<QueryTeamSimpleCommandResponse>("items", pagedResultOfQueryTeamSimpleCommandResponse.items, serializeQueryTeamSimpleCommandResponse);
        writer.writeNumberValue("total", pagedResultOfQueryTeamSimpleCommandResponse.total);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePagedResultOfQueryWikiDocumentListItem(writer: SerializationWriter, pagedResultOfQueryWikiDocumentListItem: Partial<PagedResultOfQueryWikiDocumentListItem> | undefined | null = {}) : void {
    if (pagedResultOfQueryWikiDocumentListItem) {
        serializePagedParamter(writer, pagedResultOfQueryWikiDocumentListItem)
        writer.writeCollectionOfObjectValues<QueryWikiDocumentListItem>("items", pagedResultOfQueryWikiDocumentListItem.items, serializeQueryWikiDocumentListItem);
        writer.writeNumberValue("total", pagedResultOfQueryWikiDocumentListItem.total);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePagedResultOfTeamMemberResponse(writer: SerializationWriter, pagedResultOfTeamMemberResponse: Partial<PagedResultOfTeamMemberResponse> | undefined | null = {}) : void {
    if (pagedResultOfTeamMemberResponse) {
        serializePagedParamter(writer, pagedResultOfTeamMemberResponse)
        writer.writeCollectionOfObjectValues<TeamMemberResponse>("items", pagedResultOfTeamMemberResponse.items, serializeTeamMemberResponse);
        writer.writeNumberValue("total", pagedResultOfTeamMemberResponse.total);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePreloadWikiDocumentResponse(writer: SerializationWriter, preloadWikiDocumentResponse: Partial<PreloadWikiDocumentResponse> | undefined | null = {}) : void {
    if (preloadWikiDocumentResponse) {
        writer.writeStringValue("expiration", preloadWikiDocumentResponse.expiration);
        writer.writeGuidValue("fileId", preloadWikiDocumentResponse.fileId);
        writer.writeBooleanValue("isExist", preloadWikiDocumentResponse.isExist);
        writer.writeStringValue("uploadUrl", preloadWikiDocumentResponse.uploadUrl);
        writer.writeEnumValue<FileVisibility>("visibility", preloadWikiDocumentResponse.visibility);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePreUploadFileCommandResponse(writer: SerializationWriter, preUploadFileCommandResponse: Partial<PreUploadFileCommandResponse> | undefined | null = {}) : void {
    if (preUploadFileCommandResponse) {
        writer.writeStringValue("expiration", preUploadFileCommandResponse.expiration);
        writer.writeGuidValue("fileId", preUploadFileCommandResponse.fileId);
        writer.writeBooleanValue("isExist", preUploadFileCommandResponse.isExist);
        writer.writeStringValue("uploadUrl", preUploadFileCommandResponse.uploadUrl);
        writer.writeEnumValue<FileVisibility>("visibility", preUploadFileCommandResponse.visibility);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePreUploadImageCommand(writer: SerializationWriter, preUploadImageCommand: Partial<PreUploadImageCommand> | undefined | null = {}) : void {
    if (preUploadImageCommand) {
        writer.writeStringValue("contentType", preUploadImageCommand.contentType);
        writer.writeStringValue("fileName", preUploadImageCommand.fileName);
        writer.writeNumberValue("fileSize", preUploadImageCommand.fileSize);
        writer.writeEnumValue<UploadImageType>("imageType", preUploadImageCommand.imageType);
        writer.writeStringValue("mD5", preUploadImageCommand.mD5);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePreUploadWikiDocumentCommand(writer: SerializationWriter, preUploadWikiDocumentCommand: Partial<PreUploadWikiDocumentCommand> | undefined | null = {}) : void {
    if (preUploadWikiDocumentCommand) {
        writer.writeStringValue("contentType", preUploadWikiDocumentCommand.contentType);
        writer.writeStringValue("fileName", preUploadWikiDocumentCommand.fileName);
        writer.writeNumberValue("fileSize", preUploadWikiDocumentCommand.fileSize);
        writer.writeStringValue("mD5", preUploadWikiDocumentCommand.mD5);
        writer.writeGuidValue("teamId", preUploadWikiDocumentCommand.teamId);
        writer.writeGuidValue("wikiId", preUploadWikiDocumentCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryAiModelListCommand(writer: SerializationWriter, queryAiModelListCommand: Partial<QueryAiModelListCommand> | undefined | null = {}) : void {
    if (queryAiModelListCommand) {
        writer.writeEnumValue<AiModelType>("aiModelType", queryAiModelListCommand.aiModelType);
        writer.writeEnumValue<AiProvider>("provider", queryAiModelListCommand.provider);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryAiModelListCommandResponse(writer: SerializationWriter, queryAiModelListCommandResponse: Partial<QueryAiModelListCommandResponse> | undefined | null = {}) : void {
    if (queryAiModelListCommandResponse) {
        writer.writeCollectionOfObjectValues<AiNotKeyEndpoint>("aiModels", queryAiModelListCommandResponse.aiModels, serializeAiNotKeyEndpoint);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryAiModelProviderCount(writer: SerializationWriter, queryAiModelProviderCount: Partial<QueryAiModelProviderCount> | undefined | null = {}) : void {
    if (queryAiModelProviderCount) {
        writer.writeNumberValue("count", queryAiModelProviderCount.count);
        writer.writeStringValue("provider", queryAiModelProviderCount.provider);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryAiModelProviderListResponse(writer: SerializationWriter, queryAiModelProviderListResponse: Partial<QueryAiModelProviderListResponse> | undefined | null = {}) : void {
    if (queryAiModelProviderListResponse) {
        writer.writeCollectionOfObjectValues<QueryAiModelProviderCount>("providers", queryAiModelProviderListResponse.providers, serializeQueryAiModelProviderCount);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryDefaultAiModelListCommand(writer: SerializationWriter, queryDefaultAiModelListCommand: Partial<QueryDefaultAiModelListCommand> | undefined | null = {}) : void {
    if (queryDefaultAiModelListCommand) {
        writer.writeEnumValue<AiModelType>("aiModelType", queryDefaultAiModelListCommand.aiModelType);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryDefaultAiModelListResponse(writer: SerializationWriter, queryDefaultAiModelListResponse: Partial<QueryDefaultAiModelListResponse> | undefined | null = {}) : void {
    if (queryDefaultAiModelListResponse) {
        writer.writeCollectionOfObjectValues<AiNotKeyEndpoint>("aiModels", queryDefaultAiModelListResponse.aiModels, serializeAiNotKeyEndpoint);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryRepeatedUserNameCommand(writer: SerializationWriter, queryRepeatedUserNameCommand: Partial<QueryRepeatedUserNameCommand> | undefined | null = {}) : void {
    if (queryRepeatedUserNameCommand) {
        writer.writeStringValue("userName", queryRepeatedUserNameCommand.userName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryServerInfoResponse(writer: SerializationWriter, queryServerInfoResponse: Partial<QueryServerInfoResponse> | undefined | null = {}) : void {
    if (queryServerInfoResponse) {
        writer.writeStringValue("publicStoreUrl", queryServerInfoResponse.publicStoreUrl);
        writer.writeStringValue("rsaPublic", queryServerInfoResponse.rsaPublic);
        writer.writeStringValue("serviceUrl", queryServerInfoResponse.serviceUrl);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryTeamDetailCommandResponse(writer: SerializationWriter, queryTeamDetailCommandResponse: Partial<QueryTeamDetailCommandResponse> | undefined | null = {}) : void {
    if (queryTeamDetailCommandResponse) {
        serializeAuditsInfo(writer, queryTeamDetailCommandResponse)
        writer.writeStringValue("avatarUrl", queryTeamDetailCommandResponse.avatarUrl);
        writer.writeStringValue("description", queryTeamDetailCommandResponse.description);
        writer.writeGuidValue("id", queryTeamDetailCommandResponse.id);
        writer.writeBooleanValue("isAdmin", queryTeamDetailCommandResponse.isAdmin);
        writer.writeBooleanValue("isDisable", queryTeamDetailCommandResponse.isDisable);
        writer.writeBooleanValue("isPublic", queryTeamDetailCommandResponse.isPublic);
        writer.writeBooleanValue("isRoot", queryTeamDetailCommandResponse.isRoot);
        writer.writeStringValue("markdown", queryTeamDetailCommandResponse.markdown);
        writer.writeStringValue("name", queryTeamDetailCommandResponse.name);
        writer.writeGuidValue("ownUserId", queryTeamDetailCommandResponse.ownUserId);
        writer.writeStringValue("ownUserName", queryTeamDetailCommandResponse.ownUserName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryTeamMemberListCommand(writer: SerializationWriter, queryTeamMemberListCommand: Partial<QueryTeamMemberListCommand> | undefined | null = {}) : void {
    if (queryTeamMemberListCommand) {
        serializePagedParamter(writer, queryTeamMemberListCommand)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryTeamNameCommand(writer: SerializationWriter, queryTeamNameCommand: Partial<QueryTeamNameCommand> | undefined | null = {}) : void {
    if (queryTeamNameCommand) {
        writer.writeGuidValue("id", queryTeamNameCommand.id);
        writer.writeStringValue("name", queryTeamNameCommand.name);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryTeamSimpleCommandResponse(writer: SerializationWriter, queryTeamSimpleCommandResponse: Partial<QueryTeamSimpleCommandResponse> | undefined | null = {}) : void {
    if (queryTeamSimpleCommandResponse) {
        serializeAuditsInfo(writer, queryTeamSimpleCommandResponse)
        writer.writeStringValue("avatarUrl", queryTeamSimpleCommandResponse.avatarUrl);
        writer.writeStringValue("description", queryTeamSimpleCommandResponse.description);
        writer.writeGuidValue("id", queryTeamSimpleCommandResponse.id);
        writer.writeBooleanValue("isAdmin", queryTeamSimpleCommandResponse.isAdmin);
        writer.writeBooleanValue("isDisable", queryTeamSimpleCommandResponse.isDisable);
        writer.writeBooleanValue("isPublic", queryTeamSimpleCommandResponse.isPublic);
        writer.writeBooleanValue("isRoot", queryTeamSimpleCommandResponse.isRoot);
        writer.writeStringValue("name", queryTeamSimpleCommandResponse.name);
        writer.writeGuidValue("ownUserId", queryTeamSimpleCommandResponse.ownUserId);
        writer.writeStringValue("ownUserName", queryTeamSimpleCommandResponse.ownUserName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryUserInfoCommandResponse(writer: SerializationWriter, queryUserInfoCommandResponse: Partial<QueryUserInfoCommandResponse> | undefined | null = {}) : void {
    if (queryUserInfoCommandResponse) {
        writer.writeStringValue("avatar", queryUserInfoCommandResponse.avatar);
        writer.writeStringValue("nickName", queryUserInfoCommandResponse.nickName);
        writer.writeGuidValue("userId", queryUserInfoCommandResponse.userId);
        writer.writeStringValue("userName", queryUserInfoCommandResponse.userName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryUserJoinedTeamCommand(writer: SerializationWriter, queryUserJoinedTeamCommand: Partial<QueryUserJoinedTeamCommand> | undefined | null = {}) : void {
    if (queryUserJoinedTeamCommand) {
        serializePagedParamter(writer, queryUserJoinedTeamCommand)
        writer.writeBooleanValue("isAdmin", queryUserJoinedTeamCommand.isAdmin);
        writer.writeBooleanValue("isRoot", queryUserJoinedTeamCommand.isRoot);
        writer.writeStringValue("keyword", queryUserJoinedTeamCommand.keyword);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiConfigCommandResponse(writer: SerializationWriter, queryWikiConfigCommandResponse: Partial<QueryWikiConfigCommandResponse> | undefined | null = {}) : void {
    if (queryWikiConfigCommandResponse) {
        serializeAuditsInfo(writer, queryWikiConfigCommandResponse)
        writer.writeNumberValue("embeddingBatchSize", queryWikiConfigCommandResponse.embeddingBatchSize);
        writer.writeNumberValue("embeddingDimensions", queryWikiConfigCommandResponse.embeddingDimensions);
        writer.writeGuidValue("embeddingModelId", queryWikiConfigCommandResponse.embeddingModelId);
        writer.writeStringValue("embeddingModelTokenizer", queryWikiConfigCommandResponse.embeddingModelTokenizer);
        writer.writeBooleanValue("isLock", queryWikiConfigCommandResponse.isLock);
        writer.writeNumberValue("maxRetries", queryWikiConfigCommandResponse.maxRetries);
        writer.writeGuidValue("wikiId", queryWikiConfigCommandResponse.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiDetailInfoCommand(writer: SerializationWriter, queryWikiDetailInfoCommand: Partial<QueryWikiDetailInfoCommand> | undefined | null = {}) : void {
    if (queryWikiDetailInfoCommand) {
        writer.writeGuidValue("teamId", queryWikiDetailInfoCommand.teamId);
        writer.writeGuidValue("wikiId", queryWikiDetailInfoCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiDetailInfoResponse(writer: SerializationWriter, queryWikiDetailInfoResponse: Partial<QueryWikiDetailInfoResponse> | undefined | null = {}) : void {
    if (queryWikiDetailInfoResponse) {
        writer.writeStringValue("avatarUrl", queryWikiDetailInfoResponse.avatarUrl);
        writer.writeStringValue("description", queryWikiDetailInfoResponse.description);
        writer.writeBooleanValue("isPublic", queryWikiDetailInfoResponse.isPublic);
        writer.writeStringValue("markdown", queryWikiDetailInfoResponse.markdown);
        writer.writeStringValue("name", queryWikiDetailInfoResponse.name);
        writer.writeGuidValue("wikiId", queryWikiDetailInfoResponse.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiDocumentInfoCommand(writer: SerializationWriter, queryWikiDocumentInfoCommand: Partial<QueryWikiDocumentInfoCommand> | undefined | null = {}) : void {
    if (queryWikiDocumentInfoCommand) {
        writer.writeGuidValue("documentId", queryWikiDocumentInfoCommand.documentId);
        writer.writeGuidValue("teamId", queryWikiDocumentInfoCommand.teamId);
        writer.writeGuidValue("wikiId", queryWikiDocumentInfoCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiDocumentListCommand(writer: SerializationWriter, queryWikiDocumentListCommand: Partial<QueryWikiDocumentListCommand> | undefined | null = {}) : void {
    if (queryWikiDocumentListCommand) {
        serializePagedParamter(writer, queryWikiDocumentListCommand)
        writer.writeStringValue("query", queryWikiDocumentListCommand.query);
        writer.writeGuidValue("teamId", queryWikiDocumentListCommand.teamId);
        writer.writeGuidValue("wikiId", queryWikiDocumentListCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiDocumentListItem(writer: SerializationWriter, queryWikiDocumentListItem: Partial<QueryWikiDocumentListItem> | undefined | null = {}) : void {
    if (queryWikiDocumentListItem) {
        serializeAuditsInfo(writer, queryWikiDocumentListItem)
        writer.writeStringValue("contentType", queryWikiDocumentListItem.contentType);
        writer.writeGuidValue("documentId", queryWikiDocumentListItem.documentId);
        writer.writeStringValue("fileName", queryWikiDocumentListItem.fileName);
        writer.writeStringValue("fileSize", queryWikiDocumentListItem.fileSize);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiDocumentListResponse(writer: SerializationWriter, queryWikiDocumentListResponse: Partial<QueryWikiDocumentListResponse> | undefined | null = {}) : void {
    if (queryWikiDocumentListResponse) {
        serializePagedResultOfQueryWikiDocumentListItem(writer, queryWikiDocumentListResponse)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiDocumentTaskListCommand(writer: SerializationWriter, queryWikiDocumentTaskListCommand: Partial<QueryWikiDocumentTaskListCommand> | undefined | null = {}) : void {
    if (queryWikiDocumentTaskListCommand) {
        writer.writeGuidValue("documentId", queryWikiDocumentTaskListCommand.documentId);
        writer.writeGuidValue("teamId", queryWikiDocumentTaskListCommand.teamId);
        writer.writeGuidValue("wikiId", queryWikiDocumentTaskListCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiSimpleInfoCommand(writer: SerializationWriter, queryWikiSimpleInfoCommand: Partial<QueryWikiSimpleInfoCommand> | undefined | null = {}) : void {
    if (queryWikiSimpleInfoCommand) {
        writer.writeGuidValue("teamId", queryWikiSimpleInfoCommand.teamId);
        writer.writeGuidValue("wikiId", queryWikiSimpleInfoCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueryWikiSimpleInfoResponse(writer: SerializationWriter, queryWikiSimpleInfoResponse: Partial<QueryWikiSimpleInfoResponse> | undefined | null = {}) : void {
    if (queryWikiSimpleInfoResponse) {
        writer.writeStringValue("avatarUrl", queryWikiSimpleInfoResponse.avatarUrl);
        writer.writeStringValue("description", queryWikiSimpleInfoResponse.description);
        writer.writeBooleanValue("isPublic", queryWikiSimpleInfoResponse.isPublic);
        writer.writeStringValue("name", queryWikiSimpleInfoResponse.name);
        writer.writeGuidValue("wikiId", queryWikiSimpleInfoResponse.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRefreshTokenCommand(writer: SerializationWriter, refreshTokenCommand: Partial<RefreshTokenCommand> | undefined | null = {}) : void {
    if (refreshTokenCommand) {
        writer.writeStringValue("refreshToken", refreshTokenCommand.refreshToken);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegisterUserCommand(writer: SerializationWriter, registerUserCommand: Partial<RegisterUserCommand> | undefined | null = {}) : void {
    if (registerUserCommand) {
        writer.writeStringValue("email", registerUserCommand.email);
        writer.writeStringValue("nickName", registerUserCommand.nickName);
        writer.writeStringValue("password", registerUserCommand.password);
        writer.writeStringValue("phone", registerUserCommand.phone);
        writer.writeStringValue("userName", registerUserCommand.userName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRemoveTeamMemberCommand(writer: SerializationWriter, removeTeamMemberCommand: Partial<RemoveTeamMemberCommand> | undefined | null = {}) : void {
    if (removeTeamMemberCommand) {
        writer.writeGuidValue("userId", removeTeamMemberCommand.userId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSearchResult(writer: SerializationWriter, searchResult: Partial<SearchResult> | undefined | null = {}) : void {
    if (searchResult) {
        writer.writeBooleanValue("noResult", searchResult.noResult);
        writer.writeStringValue("query", searchResult.query);
        writer.writeCollectionOfObjectValues<Citation>("results", searchResult.results, serializeCitation);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSearchWikiDocumentTextCommand(writer: SerializationWriter, searchWikiDocumentTextCommand: Partial<SearchWikiDocumentTextCommand> | undefined | null = {}) : void {
    if (searchWikiDocumentTextCommand) {
        writer.writeGuidValue("documentId", searchWikiDocumentTextCommand.documentId);
        writer.writeStringValue("query", searchWikiDocumentTextCommand.query);
        writer.writeGuidValue("teamId", searchWikiDocumentTextCommand.teamId);
        writer.writeGuidValue("wikiId", searchWikiDocumentTextCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSearchWikiDocumentTextCommandResponse(writer: SerializationWriter, searchWikiDocumentTextCommandResponse: Partial<SearchWikiDocumentTextCommandResponse> | undefined | null = {}) : void {
    if (searchWikiDocumentTextCommandResponse) {
        writer.writeObjectValue<SearchResult>("searchResult", searchWikiDocumentTextCommandResponse.searchResult, serializeSearchResult);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSetDefaultAiModelCommand(writer: SerializationWriter, setDefaultAiModelCommand: Partial<SetDefaultAiModelCommand> | undefined | null = {}) : void {
    if (setDefaultAiModelCommand) {
        writer.writeEnumValue<AiModelType>("aiModelType", setDefaultAiModelCommand.aiModelType);
        writer.writeGuidValue("modelId", setDefaultAiModelCommand.modelId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSetTeamAdminCommand(writer: SerializationWriter, setTeamAdminCommand: Partial<SetTeamAdminCommand> | undefined | null = {}) : void {
    if (setTeamAdminCommand) {
        writer.writeBooleanValue("isAdmin", setTeamAdminCommand.isAdmin);
        writer.writeGuidValue("userId", setTeamAdminCommand.userId);
        writer.writeStringValue("userName", setTeamAdminCommand.userName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSetWikiDefaultModelCommand(writer: SerializationWriter, setWikiDefaultModelCommand: Partial<SetWikiDefaultModelCommand> | undefined | null = {}) : void {
    if (setWikiDefaultModelCommand) {
        writer.writeGuidValue("modelId", setWikiDefaultModelCommand.modelId);
        writer.writeGuidValue("teamId", setWikiDefaultModelCommand.teamId);
        writer.writeGuidValue("wikiId", setWikiDefaultModelCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSimpleOfBoolean(writer: SerializationWriter, simpleOfBoolean: Partial<SimpleOfBoolean> | undefined | null = {}) : void {
    if (simpleOfBoolean) {
        writer.writeBooleanValue("data", simpleOfBoolean.data);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSimpleOfString(writer: SerializationWriter, simpleOfString: Partial<SimpleOfString> | undefined | null = {}) : void {
    if (simpleOfString) {
        writer.writeStringValue("data", simpleOfString.data);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamMemberResponse(writer: SerializationWriter, teamMemberResponse: Partial<TeamMemberResponse> | undefined | null = {}) : void {
    if (teamMemberResponse) {
        serializeAuditsInfo(writer, teamMemberResponse)
        writer.writeBooleanValue("isAdmin", teamMemberResponse.isAdmin);
        writer.writeBooleanValue("isOwner", teamMemberResponse.isOwner);
        writer.writeStringValue("nickName", teamMemberResponse.nickName);
        writer.writeStringValue("userAvatarPath", teamMemberResponse.userAvatarPath);
        writer.writeGuidValue("userId", teamMemberResponse.userId);
        writer.writeStringValue("userName", teamMemberResponse.userName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateAiEndpointRequest(writer: SerializationWriter, updateAiEndpointRequest: Partial<UpdateAiEndpointRequest> | undefined | null = {}) : void {
    if (updateAiEndpointRequest) {
        serializeAiEndpoint(writer, updateAiEndpointRequest)
        writer.writeGuidValue("modelId", updateAiEndpointRequest.modelId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateTeamInfoCommand(writer: SerializationWriter, updateTeamInfoCommand: Partial<UpdateTeamInfoCommand> | undefined | null = {}) : void {
    if (updateTeamInfoCommand) {
        writer.writeStringValue("description", updateTeamInfoCommand.description);
        writer.writeBooleanValue("isDisable", updateTeamInfoCommand.isDisable);
        writer.writeBooleanValue("isPublic", updateTeamInfoCommand.isPublic);
        writer.writeStringValue("markdown", updateTeamInfoCommand.markdown);
        writer.writeStringValue("name", updateTeamInfoCommand.name);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateUserPasswordCommand(writer: SerializationWriter, updateUserPasswordCommand: Partial<UpdateUserPasswordCommand> | undefined | null = {}) : void {
    if (updateUserPasswordCommand) {
        writer.writeStringValue("password", updateUserPasswordCommand.password);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateWikiConfigCommand(writer: SerializationWriter, updateWikiConfigCommand: Partial<UpdateWikiConfigCommand> | undefined | null = {}) : void {
    if (updateWikiConfigCommand) {
        writer.writeObjectValue<WikiConfig>("config", updateWikiConfigCommand.config, serializeWikiConfig);
        writer.writeGuidValue("teamId", updateWikiConfigCommand.teamId);
        writer.writeGuidValue("wikiId", updateWikiConfigCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateWikiInfoCommand(writer: SerializationWriter, updateWikiInfoCommand: Partial<UpdateWikiInfoCommand> | undefined | null = {}) : void {
    if (updateWikiInfoCommand) {
        writer.writeStringValue("description", updateWikiInfoCommand.description);
        writer.writeBooleanValue("isPublic", updateWikiInfoCommand.isPublic);
        writer.writeStringValue("markdown", updateWikiInfoCommand.markdown);
        writer.writeStringValue("name", updateWikiInfoCommand.name);
        writer.writeGuidValue("wikiId", updateWikiInfoCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUploadTeamAvatarCommand(writer: SerializationWriter, uploadTeamAvatarCommand: Partial<UploadTeamAvatarCommand> | undefined | null = {}) : void {
    if (uploadTeamAvatarCommand) {
        writer.writeGuidValue("fileId", uploadTeamAvatarCommand.fileId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUploadtUserAvatarCommand(writer: SerializationWriter, uploadtUserAvatarCommand: Partial<UploadtUserAvatarCommand> | undefined | null = {}) : void {
    if (uploadtUserAvatarCommand) {
        writer.writeGuidValue("fileId", uploadtUserAvatarCommand.fileId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUploadWikiAvatarCommand(writer: SerializationWriter, uploadWikiAvatarCommand: Partial<UploadWikiAvatarCommand> | undefined | null = {}) : void {
    if (uploadWikiAvatarCommand) {
        writer.writeGuidValue("fileId", uploadWikiAvatarCommand.fileId);
        writer.writeGuidValue("wikiId", uploadWikiAvatarCommand.wikiId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWikiConfig(writer: SerializationWriter, wikiConfig: Partial<WikiConfig> | undefined | null = {}) : void {
    if (wikiConfig) {
        writer.writeNumberValue("embeddingBatchSize", wikiConfig.embeddingBatchSize);
        writer.writeNumberValue("embeddingDimensions", wikiConfig.embeddingDimensions);
        writer.writeGuidValue("embeddingModelId", wikiConfig.embeddingModelId);
        writer.writeStringValue("embeddingModelTokenizer", wikiConfig.embeddingModelTokenizer);
        writer.writeNumberValue("maxRetries", wikiConfig.maxRetries);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWikiDocumentTaskItem(writer: SerializationWriter, wikiDocumentTaskItem: Partial<WikiDocumentTaskItem> | undefined | null = {}) : void {
    if (wikiDocumentTaskItem) {
        serializeAuditsInfo(writer, wikiDocumentTaskItem)
        writer.writeStringValue("contentType", wikiDocumentTaskItem.contentType);
        writer.writeGuidValue("documentId", wikiDocumentTaskItem.documentId);
        writer.writeGuidValue("fileId", wikiDocumentTaskItem.fileId);
        writer.writeStringValue("fileName", wikiDocumentTaskItem.fileName);
        writer.writeStringValue("fileSize", wikiDocumentTaskItem.fileSize);
        writer.writeGuidValue("id", wikiDocumentTaskItem.id);
        writer.writeNumberValue("maxTokensPerParagraph", wikiDocumentTaskItem.maxTokensPerParagraph);
        writer.writeStringValue("message", wikiDocumentTaskItem.message);
        writer.writeNumberValue("overlappingTokens", wikiDocumentTaskItem.overlappingTokens);
        writer.writeEnumValue<FileEmbeddingState>("state", wikiDocumentTaskItem.state);
        writer.writeStringValue("taskTag", wikiDocumentTaskItem.taskTag);
        writer.writeGuidValue("teamId", wikiDocumentTaskItem.teamId);
        writer.writeStringValue("tokenizer", wikiDocumentTaskItem.tokenizer);
        writer.writeGuidValue("wikiId", wikiDocumentTaskItem.wikiId);
    }
}
/**
 * 设置某个功能模型使用的 ai 模型.
 */
export interface SetDefaultAiModelCommand extends Parsable {
    /**
     * AI 模型的功能.
     */
    aiModelType?: AiModelType | null;
    /**
     * 模型 id.
     */
    modelId?: Guid | null;
}
/**
 * 设置成员为管理员.
 */
export interface SetTeamAdminCommand extends Parsable {
    /**
     * 设置为管理员，或取消管理员.
     */
    isAdmin?: boolean | null;
    /**
     * 被邀请的用户ID.
     */
    userId?: Guid | null;
    /**
     * 用户名.
     */
    userName?: string | null;
}
/**
 * 设置知识库默认向量化模型.
 */
export interface SetWikiDefaultModelCommand extends Parsable {
    /**
     * 模型id.
     */
    modelId?: Guid | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
/**
 * 简单类型.
 */
export interface SimpleOfBoolean extends Parsable {
    /**
     * 任何类型.
     */
    data?: boolean | null;
}
/**
 * 简单类型.
 */
export interface SimpleOfString extends Parsable {
    /**
     * 任何类型.
     */
    data?: string | null;
}
export interface TeamMemberResponse extends AuditsInfo, Parsable {
    /**
     * 是否为管理员.
     */
    isAdmin?: boolean | null;
    /**
     * 团队所有者.
     */
    isOwner?: boolean | null;
    /**
     * 昵称.
     */
    nickName?: string | null;
    /**
     * 用户头像.
     */
    userAvatarPath?: string | null;
    /**
     * 成员ID.
     */
    userId?: Guid | null;
    /**
     * 用户名称.
     */
    userName?: string | null;
}
export interface UpdateAiEndpointRequest extends AiEndpoint, Parsable {
    /**
     * AI 模型 id.
     */
    modelId?: Guid | null;
}
/**
 * 更新团队信息命令.
 */
export interface UpdateTeamInfoCommand extends Parsable {
    /**
     * 团队描述.
     */
    description?: string | null;
    /**
     * 禁用团队.
     */
    isDisable?: boolean | null;
    /**
     * 是否公开,能够被外部搜索.
     */
    isPublic?: boolean | null;
    /**
     * 团队详细介绍.
     */
    markdown?: string | null;
    /**
     * 团队名称.
     */
    name?: string | null;
}
/**
 * 重置密码.
 */
export interface UpdateUserPasswordCommand extends Parsable {
    /**
     * 新的密码.
     */
    password?: string | null;
}
/**
 * 更新知识库设置信息.
 */
export interface UpdateWikiConfigCommand extends Parsable {
    /**
     * 知识库配置.
     */
    config?: WikiConfig | null;
    /**
     * 团队 id.
     */
    teamId?: Guid | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
/**
 * 修改知识库信息.
 */
export interface UpdateWikiInfoCommand extends Parsable {
    /**
     * 知识库描述.
     */
    description?: string | null;
    /**
     * 公开使用，所有人不需要加入团队即可使用此知识库.
     */
    isPublic?: boolean | null;
    /**
     * 知识库详细介绍.
     */
    markdown?: string | null;
    /**
     * 知识库名称.
     */
    name?: string | null;
    /**
     * 知识库 id.
     */
    wikiId?: Guid | null;
}
export type UploadImageType = (typeof UploadImageTypeObject)[keyof typeof UploadImageTypeObject];
export interface UploadTeamAvatarCommand extends Parsable {
    /**
     * The fileId property
     */
    fileId?: Guid | null;
}
/**
 * 上传用户头像.
 */
export interface UploadtUserAvatarCommand extends Parsable {
    /**
     * 文件id.
     */
    fileId?: Guid | null;
}
/**
 * 上传知识库头像.
 */
export interface UploadWikiAvatarCommand extends Parsable {
    /**
     * 文件 id.
     */
    fileId?: Guid | null;
    /**
     * 团队 id.
     */
    wikiId?: Guid | null;
}
/**
 * 知识库配置.
 */
export interface WikiConfig extends Parsable {
    /**
     * 批处理大小.
     */
    embeddingBatchSize?: number | null;
    /**
     * 维度，跟模型有关，小于嵌入向量的最大值.
     */
    embeddingDimensions?: number | null;
    /**
     * 指定进行文档向量化的模型.
     */
    embeddingModelId?: Guid | null;
    /**
     * 分词器.
     */
    embeddingModelTokenizer?: string | null;
    /**
     * 文档处理最大重试次数.
     */
    maxRetries?: number | null;
}
/**
 * 文档列表.
 */
export interface WikiDocumentTaskItem extends AuditsInfo, Parsable {
    /**
     * 文件类型.
     */
    contentType?: string | null;
    /**
     * 文档id.
     */
    documentId?: Guid | null;
    /**
     * 文件id.
     */
    fileId?: Guid | null;
    /**
     * 文件名称.
     */
    fileName?: string | null;
    /**
     * 文件大小.
     */
    fileSize?: string | null;
    /**
     * id.
     */
    id?: Guid | null;
    /**
     * 每段最大token数量.
     */
    maxTokensPerParagraph?: number | null;
    /**
     * 执行信息.
     */
    message?: string | null;
    /**
     * 重叠的token数量.
     */
    overlappingTokens?: number | null;
    /**
     * 任务状态.
     */
    state?: FileEmbeddingState | null;
    /**
     * 任务标识，用来判断要执行的任务是否一致.
     */
    taskTag?: string | null;
    /**
     * 团队id.
     */
    teamId?: Guid | null;
    /**
     * 分词器.
     */
    tokenizer?: string | null;
    /**
     * 知识库id.
     */
    wikiId?: Guid | null;
}
/**
 * AI 模型大分类.
 */
export const AiModelTypeObject = {
    Chat: "chat",
    Embedding: "embedding",
    Image: "image",
    Tts: "tts",
    Stts: "stts",
    Realtime: "realtime",
    Text2video: "text2video",
    Text2music: "text2music",
} as const;
/**
 * AI 服务提供商，服务商来源.
 */
export const AiProviderObject = {
    Openai: "openai",
    Ai21: "ai21",
    Ai360: "ai360",
    Anthropic: "anthropic",
    Azure: "azure",
    Azureai: "azureai",
    Baichuan: "baichuan",
    Bedrock: "bedrock",
    Cloudflare: "cloudflare",
    Cohere: "cohere",
    Deepseek: "deepseek",
    Fireworksai: "fireworksai",
    Giteeai: "giteeai",
    Github: "github",
    Google: "google",
    Groq: "groq",
    Higress: "higress",
    Huggingface: "huggingface",
    Hunyuan: "hunyuan",
    Infiniai: "infiniai",
    Internlm: "internlm",
    Jina: "jina",
    Lmstudio: "lmstudio",
    Minimax: "minimax",
    Mistral: "mistral",
    Moonshot: "moonshot",
    Novita: "novita",
    Nvidia: "nvidia",
    Ollama: "ollama",
    Openrouter: "openrouter",
    Perplexity: "perplexity",
    Ppio: "ppio",
    Qiniu: "qiniu",
    Qwen: "qwen",
    Sambanova: "sambanova",
    Search1api: "search1api",
    Sensenova: "sensenova",
    Siliconcloud: "siliconcloud",
    Spark: "spark",
    Stepfun: "stepfun",
    Taichu: "taichu",
    Tencentcloud: "tencentcloud",
    Togetherai: "togetherai",
    Upstage: "upstage",
    Vertexai: "vertexai",
    Vllm: "vllm",
    Volcengine: "volcengine",
    Wenxin: "wenxin",
    Xai: "xai",
    Xinference: "xinference",
    Zeroone: "zeroone",
    Zhipu: "zhipu",
} as const;
/**
 * 向量化状态.
 */
export const FileEmbeddingStateObject = {
    None: "none",
    Wait: "wait",
    Processing: "processing",
    Cancal: "cancal",
    Successful: "successful",
    Failed: "failed",
} as const;
/**
 * 存储类型.
 */
export const FileVisibilityObject = {
    Public: "public",
    Private: "private",
} as const;
/**
 * 上传的图像类型.
 */
export const UploadImageTypeObject = {
    None: "none",
    UserAvatar: "userAvatar",
    TeamAvatar: "teamAvatar",
    DocumentFile: "documentFile",
} as const;
/* tslint:enable */
/* eslint-enable */
