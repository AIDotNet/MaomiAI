/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMaomiAIInfraModelsBusinessExceptionResponseFromDiscriminatorValue, createMaomiAIStoreCommandsResponsePreUploadFileCommandResponseFromDiscriminatorValue, serializeMaomiAIStoreCommandsResponsePreUploadFileCommandResponse, serializeMaomiAITeamSharedCommandsPreUploadImageCommand, type MaomiAIInfraModelsBusinessExceptionResponse, type MaomiAIStoreCommandsResponsePreUploadFileCommandResponse, type MaomiAITeamSharedCommandsPreUploadImageCommand } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/store/pre_upload_image
 */
export interface Pre_upload_imageRequestBuilder extends BaseRequestBuilder<Pre_upload_imageRequestBuilder> {
    /**
     * 获取预上传文件签名地址，只能用于上传公开类文件，如头像等.
     * @param body 上传图像，例如头像、公有图像等，文件公开访问，都根路径下.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MaomiAIStoreCommandsResponsePreUploadFileCommandResponse>}
     * @throws {MaomiAIInfraModelsBusinessExceptionResponse} error when the service returns a 400 status code
     * @throws {MaomiAIInfraModelsBusinessExceptionResponse} error when the service returns a 401 status code
     * @throws {MaomiAIInfraModelsBusinessExceptionResponse} error when the service returns a 403 status code
     * @throws {MaomiAIInfraModelsBusinessExceptionResponse} error when the service returns a 409 status code
     * @throws {MaomiAIInfraModelsBusinessExceptionResponse} error when the service returns a 500 status code
     */
     post(body: MaomiAITeamSharedCommandsPreUploadImageCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MaomiAIStoreCommandsResponsePreUploadFileCommandResponse | undefined>;
    /**
     * 获取预上传文件签名地址，只能用于上传公开类文件，如头像等.
     * @param body 上传图像，例如头像、公有图像等，文件公开访问，都根路径下.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: MaomiAITeamSharedCommandsPreUploadImageCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const Pre_upload_imageRequestBuilderUriTemplate = "{+baseurl}/api/store/pre_upload_image";
/**
 * Metadata for all the requests in the request builder.
 */
export const Pre_upload_imageRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: Pre_upload_imageRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createMaomiAIInfraModelsBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createMaomiAIInfraModelsBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createMaomiAIInfraModelsBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createMaomiAIInfraModelsBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createMaomiAIInfraModelsBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMaomiAIStoreCommandsResponsePreUploadFileCommandResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMaomiAITeamSharedCommandsPreUploadImageCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
