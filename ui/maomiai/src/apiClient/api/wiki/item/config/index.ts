/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBusinessExceptionResponseFromDiscriminatorValue, createQueryWikiConfigCommandResponseFromDiscriminatorValue, type BusinessExceptionResponse, type QueryWikiConfigCommandResponse } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/wiki/{temaId}/config
 */
export interface ConfigRequestBuilder extends BaseRequestBuilder<ConfigRequestBuilder> {
    /**
     * 查询知识库的配置.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<QueryWikiConfigCommandResponse>}
     * @throws {BusinessExceptionResponse} error when the service returns a 400 status code
     * @throws {BusinessExceptionResponse} error when the service returns a 401 status code
     * @throws {BusinessExceptionResponse} error when the service returns a 403 status code
     * @throws {BusinessExceptionResponse} error when the service returns a 409 status code
     * @throws {BusinessExceptionResponse} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<ConfigRequestBuilderGetQueryParameters> | undefined) : Promise<QueryWikiConfigCommandResponse | undefined>;
    /**
     * 查询知识库的配置.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ConfigRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * 查询知识库的配置.
 */
export interface ConfigRequestBuilderGetQueryParameters {
    /**
     * 团队 id.
     */
    teamId?: Guid;
    /**
     * 知识库 id.
     */
    wikiId?: Guid;
}
/**
 * Uri template for the request builder.
 */
export const ConfigRequestBuilderUriTemplate = "{+baseurl}/api/wiki/{temaId}/config?TeamId={TeamId}&WikiId={WikiId}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ConfigRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "teamId": "TeamId",
    "wikiId": "WikiId",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ConfigRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ConfigRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createQueryWikiConfigCommandResponseFromDiscriminatorValue,
        queryParametersMapper: ConfigRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
