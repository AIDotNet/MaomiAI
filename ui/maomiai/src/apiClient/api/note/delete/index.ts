/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBusinessExceptionResponseFromDiscriminatorValue, createEmptyCommandResponseFromDiscriminatorValue, serializeDeleteNoteCommand, serializeEmptyCommandResponse, type BusinessExceptionResponse, type DeleteNoteCommand, type EmptyCommandResponse } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/note/delete
 */
export interface DeleteRequestBuilder extends BaseRequestBuilder<DeleteRequestBuilder> {
    /**
     * 删除一个笔记.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EmptyCommandResponse>}
     * @throws {BusinessExceptionResponse} error when the service returns a 400 status code
     * @throws {BusinessExceptionResponse} error when the service returns a 401 status code
     * @throws {BusinessExceptionResponse} error when the service returns a 403 status code
     * @throws {BusinessExceptionResponse} error when the service returns a 409 status code
     * @throws {BusinessExceptionResponse} error when the service returns a 500 status code
     */
     delete(body: DeleteNoteCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<EmptyCommandResponse | undefined>;
    /**
     * 删除一个笔记.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(body: DeleteNoteCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const DeleteRequestBuilderUriTemplate = "{+baseurl}/api/note/delete";
/**
 * Metadata for all the requests in the request builder.
 */
export const DeleteRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DeleteRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createBusinessExceptionResponseFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEmptyCommandResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeleteNoteCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
